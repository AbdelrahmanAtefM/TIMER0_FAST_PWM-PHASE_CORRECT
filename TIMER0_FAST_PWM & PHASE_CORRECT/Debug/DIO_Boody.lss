
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00003dc8  00003e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080009a  0080009a  00003e96  2**0
                  ALLOC
  3 .stab         00003f00  00000000  00000000  00003e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000163f  00000000  00000000  00007d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000093d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009517  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cf68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d355  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <main>
      8a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_TIMER0_void_Timer0Int>:
u32 MTimer0_u32NumOfCM =0;
void (*CallBack)(void);
///***************** FUNCTIONS **********//
/// M_TIMER0_void_Timer0Int is a function to initialize Timer0///
void M_TIMER0_void_Timer0Int(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   /// To enable TIMER0 overflow INT
   // Set TOIEO in TIMSK_REG
	  SetBit(TIMSK_REG , TOIE0);
#elif TIMER0_MODE == CTC_MODE
	  /// To Enable CTC_MODE clear WGM00 and  set WGM01 in TCCR0_REG
	  	  ClrBit(TCCR0_REG ,WGM00 );
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	  	  SetBit(TCCR0_REG ,WGM01 );
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	  /// To enable TIMER0 compare match INT
	   // Set OCIE0 in TIMSK_REG
	  	 SetBit(TIMSK_REG , OCIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
#endif //// end if for  TIMER0_MODE

}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <M_TIMER0_U8_Timer0SetTime>:
///M_TIMER0_U8_Timer0SetTime function to set time
void M_TIMER0_U8_Timer0SetTime(u32 Loacl_u8DesierdTime_ms)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2d 97       	sbiw	r28, 0x0d	; 13
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	6a 87       	std	Y+10, r22	; 0x0a
     b94:	7b 87       	std	Y+11, r23	; 0x0b
     b96:	8c 87       	std	Y+12, r24	; 0x0c
     b98:	9d 87       	std	Y+13, r25	; 0x0d

	/// time of the tick  time
    u32 Local_u32TickTime = TIMER0_PRESCALER / FOSC ;  /// results will be in micro sec
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	8e 83       	std	Y+6, r24	; 0x06
     ba4:	9f 83       	std	Y+7, r25	; 0x07
     ba6:	a8 87       	std	Y+8, r26	; 0x08
     ba8:	b9 87       	std	Y+9, r27	; 0x09
    /// the number of the total ticks
    u32 Local_u32TotalTicks =  (Loacl_u8DesierdTime_ms *1000) / Local_u32TickTime;
     baa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bac:	9b 85       	ldd	r25, Y+11	; 0x0b
     bae:	ac 85       	ldd	r26, Y+12	; 0x0c
     bb0:	bd 85       	ldd	r27, Y+13	; 0x0d
     bb2:	28 ee       	ldi	r18, 0xE8	; 232
     bb4:	33 e0       	ldi	r19, 0x03	; 3
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	2e 81       	ldd	r18, Y+6	; 0x06
     bc8:	3f 81       	ldd	r19, Y+7	; 0x07
     bca:	48 85       	ldd	r20, Y+8	; 0x08
     bcc:	59 85       	ldd	r21, Y+9	; 0x09
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__udivmodsi4>
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	9b 83       	std	Y+3, r25	; 0x03
     bde:	ac 83       	std	Y+4, r26	; 0x04
     be0:	bd 83       	std	Y+5, r27	; 0x05
    	 //// TCNT0_REG will start from the reminded ticks number
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	03 c0       	rjmp	.+6      	; 0xbee <M_TIMER0_U8_Timer0SetTime+0x70>
     while(Local_u32TotalTicks % Local_8uCounter)
     {
    	 Local_8uCounter--;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	89 83       	std	Y+1, r24	; 0x01
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     while(Local_u32TotalTicks % Local_8uCounter)
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	ac 81       	ldd	r26, Y+4	; 0x04
     bfe:	bd 81       	ldd	r27, Y+5	; 0x05
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__udivmodsi4>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	51 f7       	brne	.-44     	; 0xbe8 <M_TIMER0_U8_Timer0SetTime+0x6a>
     {
    	 Local_8uCounter--;
     }
     MTimer0_u32NumOfCM = Local_u32TotalTicks /Local_8uCounter ;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	ac 81       	ldd	r26, Y+4	; 0x04
     c24:	bd 81       	ldd	r27, Y+5	; 0x05
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__udivmodsi4>
     c2e:	da 01       	movw	r26, r20
     c30:	c9 01       	movw	r24, r18
     c32:	80 93 9f 00 	sts	0x009F, r24
     c36:	90 93 a0 00 	sts	0x00A0, r25
     c3a:	a0 93 a1 00 	sts	0x00A1, r26
     c3e:	b0 93 a2 00 	sts	0x00A2, r27
     OCR0_REG = Local_8uCounter - 1;
     c42:	ec e5       	ldi	r30, 0x5C	; 92
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	81 50       	subi	r24, 0x01	; 1
     c4a:	80 83       	st	Z, r24

#endif
}
     c4c:	2d 96       	adiw	r28, 0x0d	; 13
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <M_TIMER0_void_Timer0Start>:
/// M_TIMER0_void_Timer0Start to let Timer0 start

void M_TIMER0_void_Timer0Start(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/// Selecting prescaler
#if  TIMER0_PRESCALER == 1024       /// 1024 mode
	 /// set   CS00 in TCCR0_REG
	    SetBit(TCCR0_REG , CS00);
     c66:	a3 e5       	ldi	r26, 0x53	; 83
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e3 e5       	ldi	r30, 0x53	; 83
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	8c 93       	st	X, r24
     /// clear CS01 in TCCR0_REG
        ClrBit(TCCR0_REG , CS01);
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8d 7f       	andi	r24, 0xFD	; 253
     c80:	8c 93       	st	X, r24
     /// set   CS02 in TCCR0_REG
        SetBit(TCCR0_REG , CS02);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	8c 93       	st	X, r24
        SetBit(TCCR0_REG , CS01);
	/// clear CS00 in TCCR0_REG
        ClrBit(TCCR0_REG , CS00);
#endif //// end if for  PRESCALER

}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <M_TIMER0_void_Timer0Stop>:
///M_TIMER0_void_Timer0Stop to stop Timer0
void M_TIMER0_void_Timer0Stop(void)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	///clear the three bits (CS00 , CS01 ,CS02 )
	ClrBit(TCCR0_REG , CS00);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8e 7f       	andi	r24, 0xFE	; 254
     caa:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS01);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS02);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8b 7f       	andi	r24, 0xFB	; 251
     cc6:	8c 93       	st	X, r24
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <M_TIMER0_void_Pwm0Int>:



/////****M_TIMER0_void_Pwm0Int function to initialize PWM0
void M_TIMER0_void_Pwm0Int(void)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	////******set direction of  pin PB3(OC0) to OUTPUT
	M_DIO_void_SetPinDirection(PORTB_ID, PIN3, OUTPUT);
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	63 e0       	ldi	r22, 0x03	; 3
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>


#endif   //// ****** End of TIMER0_FAST_PWM_MODE
#elif TIMER0_PWM_MODE == PHASE_CORRECT
	/// To Enable FAST PMW0 set( WGM01 & WGM00 )in TCCR0_REG
	 SetBit(TCCR0_REG ,WGM00 );
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	8c 93       	st	X, r24
	 ClrBit(TCCR0_REG ,WGM01 );
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	8c 93       	st	X, r24
	 ////******** TIMER0 PHASE CORRECT PWM  MODE*******//
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
    /// To select  TIMER0_PWM_PHASE_CORRECT  INVERTED Mode set(COM01) and clear(COM00) in TCCR0_REG
	  SetBit(TCCR0_REG ,COM01 );
     cfc:	a3 e5       	ldi	r26, 0x53	; 83
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e3 e5       	ldi	r30, 0x53	; 83
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 62       	ori	r24, 0x20	; 32
     d08:	8c 93       	st	X, r24
	  ClrBit(TCCR0_REG ,COM00 );
     d0a:	a3 e5       	ldi	r26, 0x53	; 83
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e3 e5       	ldi	r30, 0x53	; 83
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 7e       	andi	r24, 0xEF	; 239
     d16:	8c 93       	st	X, r24


#endif   //// ****** TIMER0_PWM_PHASE_CORRECT

#endif    //// ****** End of TIMER0_PWM_MODE
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <M_TIMER0_void_Pwm0SetDutyCycle>:
/////****M_TIMER0_void_Pwm0SetDutySycle function to set duty cycle for  PWM0
void M_TIMER0_void_Pwm0SetDutyCycle(u8 Local_u8DutySycle)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01

#endif

#elif TIMER0_PWM_MODE == PHASE_CORRECT
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
	OCR0_REG = ((Local_u8DutySycle * 255 )/100);
     d2a:	ec e5       	ldi	r30, 0x5C	; 92
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	48 2f       	mov	r20, r24
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	ca 01       	movw	r24, r20
     d36:	9c 01       	movw	r18, r24
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	c9 01       	movw	r24, r18
     d3e:	96 95       	lsr	r25
     d40:	98 2f       	mov	r25, r24
     d42:	88 27       	eor	r24, r24
     d44:	97 95       	ror	r25
     d46:	87 95       	ror	r24
     d48:	82 1b       	sub	r24, r18
     d4a:	93 0b       	sbc	r25, r19
     d4c:	84 0f       	add	r24, r20
     d4e:	95 1f       	adc	r25, r21
     d50:	24 e6       	ldi	r18, 0x64	; 100
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
     d5a:	cb 01       	movw	r24, r22
     d5c:	80 83       	st	Z, r24
#elif  TIMER0_PWM_PHASE_CORRECT  == INVERTED

#endif  //// ****** TIMER0_PWM_PHASE_CORRECT
#endif  //// ****** End of TIMER0_PWM_MODE

}
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <M_TIMER0_void_Pwm0Start>:

///*********M_TIMER0_void_Pwm0Start to Start PWM0
void M_TIMER0_void_Pwm0Start(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Start();
     d6e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <M_TIMER0_void_Timer0Start>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <M_TIMER0_void_Pwm0Stop>:
///*******M_TIMER0_void_Pwm0Stop to stop PWM0
void M_TIMER0_void_Pwm0Stop(void)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Stop();
     d80:	0e 94 4b 06 	call	0xc96	; 0xc96 <M_TIMER0_void_Timer0Stop>
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <M_TIMER0_void_Timer0SetCallBack>:

/// M_TIMER0_void_Timer0SetCallBack to set callback function
void M_TIMER0_void_Timer0SetCallBack(void (*Local_Ptr)(void))
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <M_TIMER0_void_Timer0SetCallBack+0x6>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Local_Ptr;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	90 93 aa 00 	sts	0x00AA, r25
     da0:	80 93 a9 00 	sts	0x00A9, r24

}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <__vector_10>:
}

#elif TIMER0_MODE == CTC_MODE

ISR(TIMER0_COMP_vect)
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Conter =0;
	    Local_u32Conter ++;
     dd8:	80 91 a3 00 	lds	r24, 0x00A3
     ddc:	90 91 a4 00 	lds	r25, 0x00A4
     de0:	a0 91 a5 00 	lds	r26, 0x00A5
     de4:	b0 91 a6 00 	lds	r27, 0x00A6
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	a1 1d       	adc	r26, r1
     dec:	b1 1d       	adc	r27, r1
     dee:	80 93 a3 00 	sts	0x00A3, r24
     df2:	90 93 a4 00 	sts	0x00A4, r25
     df6:	a0 93 a5 00 	sts	0x00A5, r26
     dfa:	b0 93 a6 00 	sts	0x00A6, r27
	  if(Local_u32Conter ==  MTimer0_u32NumOfCM)
     dfe:	20 91 a3 00 	lds	r18, 0x00A3
     e02:	30 91 a4 00 	lds	r19, 0x00A4
     e06:	40 91 a5 00 	lds	r20, 0x00A5
     e0a:	50 91 a6 00 	lds	r21, 0x00A6
     e0e:	80 91 9f 00 	lds	r24, 0x009F
     e12:	90 91 a0 00 	lds	r25, 0x00A0
     e16:	a0 91 a1 00 	lds	r26, 0x00A1
     e1a:	b0 91 a2 00 	lds	r27, 0x00A2
     e1e:	28 17       	cp	r18, r24
     e20:	39 07       	cpc	r19, r25
     e22:	4a 07       	cpc	r20, r26
     e24:	5b 07       	cpc	r21, r27
     e26:	69 f4       	brne	.+26     	; 0xe42 <__vector_10+0x94>
	  {
           CallBack();
     e28:	e0 91 a9 00 	lds	r30, 0x00A9
     e2c:	f0 91 aa 00 	lds	r31, 0x00AA
     e30:	09 95       	icall
		  Local_u32Conter =0;
     e32:	10 92 a3 00 	sts	0x00A3, r1
     e36:	10 92 a4 00 	sts	0x00A4, r1
     e3a:	10 92 a5 00 	sts	0x00A5, r1
     e3e:	10 92 a6 00 	sts	0x00A6, r1
	  }
}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <M_GIE_void_GIE_EN>:
#include "GIE_Int.h"

/// *************** Functions  ************//
/// M_GIE_void_GIEEn function to Enable general interrupt
void M_GIE_void_GIE_EN (void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	///set I_BIT in SREG_REG
	SetBit(SREG_REG,I_BIT);
     e70:	af e5       	ldi	r26, 0x5F	; 95
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ef e5       	ldi	r30, 0x5F	; 95
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 68       	ori	r24, 0x80	; 128
     e7c:	8c 93       	st	X, r24
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <M_GIE_void_GIE_DIS>:
/// M_GIE_void_GIEDIS function to Disable general interrupt
void M_GIE_void_GIE_DIS (void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	///clear I_BIT in SREG_REG
	ClrBit(SREG_REG,I_BIT);
     e8c:	af e5       	ldi	r26, 0x5F	; 95
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ef e5       	ldi	r30, 0x5F	; 95
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 77       	andi	r24, 0x7F	; 127
     e98:	8c 93       	st	X, r24
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <M_EXTI_IN0_void_EXTI_INT0EN>:

void (*EXTI_INT0_CallBack)(void);
/// **************Functions********//
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Enable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0EN(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
    ///Enable internal interrupt for INT0
        SetBit(GICR_REG,INT0);
     ea8:	ab e5       	ldi	r26, 0x5B	; 91
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e5       	ldi	r30, 0x5B	; 91
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
////  Interrupt 0 (INT0) Sense Control
/// Interrupt Request on Falling_Edge
#if SENSE_CONTROL   == Falling_Edge
	/// Set bit ISC01  on MCUCR_REG
	SetBit(MCUCR_REG ,ISC01);
     eb6:	a5 e5       	ldi	r26, 0x55	; 85
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e5       	ldi	r30, 0x55	; 85
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
     ec4:	a5 e5       	ldi	r26, 0x55	; 85
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e5       	ldi	r30, 0x55	; 85
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	8c 93       	st	X, r24
	/// Set bit ISC01  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC01);
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
#endif
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <M_EXTI_IN0_void_EXTI_INT0DIS>:
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Disable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0DIS()
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	///Disable internal interrupt
	    ClrBit(GICR_REG,INT0);
     ee0:	ab e5       	ldi	r26, 0x5B	; 91
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e5       	ldi	r30, 0x5B	; 91
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	8c 93       	st	X, r24
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <M_EXTI_INT0_void_Set_CallBack>:
///************** M_EXTI_INT0_void_Set_CallBack Function ********//
void M_EXTI_INT0_void_Set_CallBack (void (*local_ptr)(void))
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <M_EXTI_INT0_void_Set_CallBack+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	EXTI_INT0_CallBack = local_ptr;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	90 93 ac 00 	sts	0x00AC, r25
     f0a:	80 93 ab 00 	sts	0x00AB, r24

}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <__vector_1>:

ISR(INT0_vect)
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	EXTI_INT0_CallBack();
     f42:	e0 91 ab 00 	lds	r30, 0x00AB
     f46:	f0 91 ac 00 	lds	r31, 0x00AC
     f4a:	09 95       	icall
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	29 97       	sbiw	r28, 0x09	; 9
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6a 83       	std	Y+2, r22	; 0x02
     f8a:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	39 87       	std	Y+9, r19	; 0x09
     f94:	28 87       	std	Y+8, r18	; 0x08
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	99 85       	ldd	r25, Y+9	; 0x09
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	39 f0       	breq	.+14     	; 0xfac <M_DIO_void_SetPinDirection+0x3a>
     f9e:	28 85       	ldd	r18, Y+8	; 0x08
     fa0:	39 85       	ldd	r19, Y+9	; 0x09
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <M_DIO_void_SetPinDirection+0x38>
     fa8:	76 c0       	rjmp	.+236    	; 0x1096 <M_DIO_void_SetPinDirection+0x124>
     faa:	e4 c0       	rjmp	.+456    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3f 83       	std	Y+7, r19	; 0x07
     fb4:	2e 83       	std	Y+6, r18	; 0x06
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	61 f1       	breq	.+88     	; 0x1018 <M_DIO_void_SetPinDirection+0xa6>
     fc0:	2e 81       	ldd	r18, Y+6	; 0x06
     fc2:	3f 81       	ldd	r19, Y+7	; 0x07
     fc4:	23 30       	cpi	r18, 0x03	; 3
     fc6:	31 05       	cpc	r19, r1
     fc8:	34 f4       	brge	.+12     	; 0xfd6 <M_DIO_void_SetPinDirection+0x64>
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	9f 81       	ldd	r25, Y+7	; 0x07
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	69 f0       	breq	.+26     	; 0xfee <M_DIO_void_SetPinDirection+0x7c>
     fd4:	cf c0       	rjmp	.+414    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
     fd6:	2e 81       	ldd	r18, Y+6	; 0x06
     fd8:	3f 81       	ldd	r19, Y+7	; 0x07
     fda:	23 30       	cpi	r18, 0x03	; 3
     fdc:	31 05       	cpc	r19, r1
     fde:	89 f1       	breq	.+98     	; 0x1042 <M_DIO_void_SetPinDirection+0xd0>
     fe0:	8e 81       	ldd	r24, Y+6	; 0x06
     fe2:	9f 81       	ldd	r25, Y+7	; 0x07
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <M_DIO_void_SetPinDirection+0x7a>
     fea:	40 c0       	rjmp	.+128    	; 0x106c <M_DIO_void_SetPinDirection+0xfa>
     fec:	c3 c0       	rjmp	.+390    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
     fee:	aa e3       	ldi	r26, 0x3A	; 58
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ea e3       	ldi	r30, 0x3A	; 58
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <M_DIO_void_SetPinDirection+0x9a>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <M_DIO_void_SetPinDirection+0x96>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	ae c0       	rjmp	.+348    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <M_DIO_void_SetPinDirection+0xc4>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <M_DIO_void_SetPinDirection+0xc0>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	99 c0       	rjmp	.+306    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
    1042:	a4 e3       	ldi	r26, 0x34	; 52
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e4 e3       	ldi	r30, 0x34	; 52
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <M_DIO_void_SetPinDirection+0xee>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <M_DIO_void_SetPinDirection+0xea>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
    106c:	a1 e3       	ldi	r26, 0x31	; 49
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e1 e3       	ldi	r30, 0x31	; 49
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <M_DIO_void_SetPinDirection+0x118>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <M_DIO_void_SetPinDirection+0x114>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	6f c0       	rjmp	.+222    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3d 83       	std	Y+5, r19	; 0x05
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	91 05       	cpc	r25, r1
    10a8:	51 f1       	breq	.+84     	; 0x10fe <M_DIO_void_SetPinDirection+0x18c>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	23 30       	cpi	r18, 0x03	; 3
    10b0:	31 05       	cpc	r19, r1
    10b2:	34 f4       	brge	.+12     	; 0x10c0 <M_DIO_void_SetPinDirection+0x14e>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	61 f0       	breq	.+24     	; 0x10d6 <M_DIO_void_SetPinDirection+0x164>
    10be:	5a c0       	rjmp	.+180    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	23 30       	cpi	r18, 0x03	; 3
    10c6:	31 05       	cpc	r19, r1
    10c8:	71 f1       	breq	.+92     	; 0x1126 <M_DIO_void_SetPinDirection+0x1b4>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	91 05       	cpc	r25, r1
    10d2:	e9 f1       	breq	.+122    	; 0x114e <M_DIO_void_SetPinDirection+0x1dc>
    10d4:	4f c0       	rjmp	.+158    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
    10d6:	aa e3       	ldi	r26, 0x3A	; 58
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ea e3       	ldi	r30, 0x3A	; 58
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <M_DIO_void_SetPinDirection+0x182>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <M_DIO_void_SetPinDirection+0x17e>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	3b c0       	rjmp	.+118    	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
    10fe:	a7 e3       	ldi	r26, 0x37	; 55
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e3       	ldi	r30, 0x37	; 55
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <M_DIO_void_SetPinDirection+0x1aa>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <M_DIO_void_SetPinDirection+0x1a6>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	27 c0       	rjmp	.+78     	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
    1126:	a4 e3       	ldi	r26, 0x34	; 52
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <M_DIO_void_SetPinDirection+0x1d2>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <M_DIO_void_SetPinDirection+0x1ce>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	13 c0       	rjmp	.+38     	; 0x1174 <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
    114e:	a1 e3       	ldi	r26, 0x31	; 49
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e1 e3       	ldi	r30, 0x31	; 49
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <M_DIO_void_SetPinDirection+0x1fa>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <M_DIO_void_SetPinDirection+0x1f6>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
    1174:	29 96       	adiw	r28, 0x09	; 9
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	29 97       	sbiw	r28, 0x09	; 9
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	6a 83       	std	Y+2, r22	; 0x02
    119e:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	39 87       	std	Y+9, r19	; 0x09
    11a8:	28 87       	std	Y+8, r18	; 0x08
    11aa:	88 85       	ldd	r24, Y+8	; 0x08
    11ac:	99 85       	ldd	r25, Y+9	; 0x09
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <M_DIO_void_SetPinValue+0x3a>
    11b2:	28 85       	ldd	r18, Y+8	; 0x08
    11b4:	39 85       	ldd	r19, Y+9	; 0x09
    11b6:	21 30       	cpi	r18, 0x01	; 1
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <M_DIO_void_SetPinValue+0x38>
    11bc:	76 c0       	rjmp	.+236    	; 0x12aa <M_DIO_void_SetPinValue+0x124>
    11be:	e4 c0       	rjmp	.+456    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3f 83       	std	Y+7, r19	; 0x07
    11c8:	2e 83       	std	Y+6, r18	; 0x06
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	91 05       	cpc	r25, r1
    11d2:	61 f1       	breq	.+88     	; 0x122c <M_DIO_void_SetPinValue+0xa6>
    11d4:	2e 81       	ldd	r18, Y+6	; 0x06
    11d6:	3f 81       	ldd	r19, Y+7	; 0x07
    11d8:	23 30       	cpi	r18, 0x03	; 3
    11da:	31 05       	cpc	r19, r1
    11dc:	34 f4       	brge	.+12     	; 0x11ea <M_DIO_void_SetPinValue+0x64>
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	69 f0       	breq	.+26     	; 0x1202 <M_DIO_void_SetPinValue+0x7c>
    11e8:	cf c0       	rjmp	.+414    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	23 30       	cpi	r18, 0x03	; 3
    11f0:	31 05       	cpc	r19, r1
    11f2:	89 f1       	breq	.+98     	; 0x1256 <M_DIO_void_SetPinValue+0xd0>
    11f4:	8e 81       	ldd	r24, Y+6	; 0x06
    11f6:	9f 81       	ldd	r25, Y+7	; 0x07
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <M_DIO_void_SetPinValue+0x7a>
    11fe:	40 c0       	rjmp	.+128    	; 0x1280 <M_DIO_void_SetPinValue+0xfa>
    1200:	c3 c0       	rjmp	.+390    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <M_DIO_void_SetPinValue+0x9a>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <M_DIO_void_SetPinValue+0x96>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	ae c0       	rjmp	.+348    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <M_DIO_void_SetPinValue+0xc4>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <M_DIO_void_SetPinValue+0xc0>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	99 c0       	rjmp	.+306    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
    1256:	a5 e3       	ldi	r26, 0x35	; 53
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <M_DIO_void_SetPinValue+0xee>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <M_DIO_void_SetPinValue+0xea>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	84 c0       	rjmp	.+264    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <M_DIO_void_SetPinValue+0x118>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <M_DIO_void_SetPinValue+0x114>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	6f c0       	rjmp	.+222    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	91 05       	cpc	r25, r1
    12bc:	51 f1       	breq	.+84     	; 0x1312 <M_DIO_void_SetPinValue+0x18c>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	23 30       	cpi	r18, 0x03	; 3
    12c4:	31 05       	cpc	r19, r1
    12c6:	34 f4       	brge	.+12     	; 0x12d4 <M_DIO_void_SetPinValue+0x14e>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	91 05       	cpc	r25, r1
    12d0:	61 f0       	breq	.+24     	; 0x12ea <M_DIO_void_SetPinValue+0x164>
    12d2:	5a c0       	rjmp	.+180    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
    12d4:	2c 81       	ldd	r18, Y+4	; 0x04
    12d6:	3d 81       	ldd	r19, Y+5	; 0x05
    12d8:	23 30       	cpi	r18, 0x03	; 3
    12da:	31 05       	cpc	r19, r1
    12dc:	71 f1       	breq	.+92     	; 0x133a <M_DIO_void_SetPinValue+0x1b4>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	91 05       	cpc	r25, r1
    12e6:	e9 f1       	breq	.+122    	; 0x1362 <M_DIO_void_SetPinValue+0x1dc>
    12e8:	4f c0       	rjmp	.+158    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <M_DIO_void_SetPinValue+0x182>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <M_DIO_void_SetPinValue+0x17e>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	3b c0       	rjmp	.+118    	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <M_DIO_void_SetPinValue+0x1aa>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <M_DIO_void_SetPinValue+0x1a6>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <M_DIO_void_SetPinValue+0x1d2>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <M_DIO_void_SetPinValue+0x1ce>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	13 c0       	rjmp	.+38     	; 0x1388 <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <M_DIO_void_SetPinValue+0x1fa>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <M_DIO_void_SetPinValue+0x1f6>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
    1388:	29 96       	adiw	r28, 0x09	; 9
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <M_DIO_void_PinTog+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <M_DIO_void_PinTog+0x8>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	91 05       	cpc	r25, r1
    13bc:	51 f1       	breq	.+84     	; 0x1412 <M_DIO_void_PinTog+0x78>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	23 30       	cpi	r18, 0x03	; 3
    13c4:	31 05       	cpc	r19, r1
    13c6:	34 f4       	brge	.+12     	; 0x13d4 <M_DIO_void_PinTog+0x3a>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	61 f0       	breq	.+24     	; 0x13ea <M_DIO_void_PinTog+0x50>
    13d2:	5a c0       	rjmp	.+180    	; 0x1488 <M_DIO_void_PinTog+0xee>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	23 30       	cpi	r18, 0x03	; 3
    13da:	31 05       	cpc	r19, r1
    13dc:	71 f1       	breq	.+92     	; 0x143a <M_DIO_void_PinTog+0xa0>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	91 05       	cpc	r25, r1
    13e6:	e9 f1       	breq	.+122    	; 0x1462 <M_DIO_void_PinTog+0xc8>
    13e8:	4f c0       	rjmp	.+158    	; 0x1488 <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
    13ea:	ab e3       	ldi	r26, 0x3B	; 59
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	eb e3       	ldi	r30, 0x3B	; 59
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <M_DIO_void_PinTog+0x6e>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <M_DIO_void_PinTog+0x6a>
    140c:	84 27       	eor	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	3b c0       	rjmp	.+118    	; 0x1488 <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
    1412:	a8 e3       	ldi	r26, 0x38	; 56
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e3       	ldi	r30, 0x38	; 56
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <M_DIO_void_PinTog+0x96>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <M_DIO_void_PinTog+0x92>
    1434:	84 27       	eor	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	27 c0       	rjmp	.+78     	; 0x1488 <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
    143a:	a5 e3       	ldi	r26, 0x35	; 53
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e5 e3       	ldi	r30, 0x35	; 53
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <M_DIO_void_PinTog+0xbe>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <M_DIO_void_PinTog+0xba>
    145c:	84 27       	eor	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	13 c0       	rjmp	.+38     	; 0x1488 <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    1462:	a2 e3       	ldi	r26, 0x32	; 50
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e2 e3       	ldi	r30, 0x32	; 50
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <M_DIO_void_PinTog+0xe6>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <M_DIO_void_PinTog+0xe2>
    1484:	84 27       	eor	r24, r20
    1486:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <M_DIO_U8_PinRead+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <M_DIO_U8_PinRead+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    14a8:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	4c 81       	ldd	r20, Y+4	; 0x04
    14b6:	5d 81       	ldd	r21, Y+5	; 0x05
    14b8:	42 30       	cpi	r20, 0x02	; 2
    14ba:	51 05       	cpc	r21, r1
    14bc:	41 f1       	breq	.+80     	; 0x150e <M_DIO_U8_PinRead+0x78>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <M_DIO_U8_PinRead+0x3e>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	21 30       	cpi	r18, 0x01	; 1
    14ce:	31 05       	cpc	r19, r1
    14d0:	61 f0       	breq	.+24     	; 0x14ea <M_DIO_U8_PinRead+0x54>
    14d2:	52 c0       	rjmp	.+164    	; 0x1578 <M_DIO_U8_PinRead+0xe2>
    14d4:	4c 81       	ldd	r20, Y+4	; 0x04
    14d6:	5d 81       	ldd	r21, Y+5	; 0x05
    14d8:	43 30       	cpi	r20, 0x03	; 3
    14da:	51 05       	cpc	r21, r1
    14dc:	51 f1       	breq	.+84     	; 0x1532 <M_DIO_U8_PinRead+0x9c>
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	91 05       	cpc	r25, r1
    14e6:	b9 f1       	breq	.+110    	; 0x1556 <M_DIO_U8_PinRead+0xc0>
    14e8:	47 c0       	rjmp	.+142    	; 0x1578 <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    14ea:	e9 e3       	ldi	r30, 0x39	; 57
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <M_DIO_U8_PinRead+0x6c>
    14fe:	55 95       	asr	r21
    1500:	47 95       	ror	r20
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <M_DIO_U8_PinRead+0x68>
    1506:	ca 01       	movw	r24, r20
    1508:	81 70       	andi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	35 c0       	rjmp	.+106    	; 0x1578 <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    150e:	e6 e3       	ldi	r30, 0x36	; 54
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <M_DIO_U8_PinRead+0x90>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <M_DIO_U8_PinRead+0x8c>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	23 c0       	rjmp	.+70     	; 0x1578 <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    1532:	e3 e3       	ldi	r30, 0x33	; 51
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_U8_PinRead+0xb4>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_U8_PinRead+0xb0>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <M_DIO_U8_PinRead+0xd8>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <M_DIO_U8_PinRead+0xd4>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <M_ADC_void_AdcInt>:


u16 x =0;

void M_ADC_void_AdcInt(void)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
#if V_REF == AVCC
	/// Selecting voltage reference to AVCC
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG, REFS0);
    1592:	a7 e2       	ldi	r26, 0x27	; 39
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e7 e2       	ldi	r30, 0x27	; 39
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 64       	ori	r24, 0x40	; 64
    159e:	8c 93       	st	X, r24
	// clear REFS0 bit in ADMUX_REG
	ClrBit(ADMUX_REG ,REFS1);
    15a0:	a7 e2       	ldi	r26, 0x27	; 39
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e7 e2       	ldi	r30, 0x27	; 39
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 77       	andi	r24, 0x7F	; 127
    15ac:	8c 93       	st	X, r24
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG ,REFS1);
#endif
	/// selecting Adjustment  Result
	// Clear ADLAR bit on ADMUX_REG to select right adjust result
	ClrBit(ADMUX_REG , ADLAR);
    15ae:	a7 e2       	ldi	r26, 0x27	; 39
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e7 e2       	ldi	r30, 0x27	; 39
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7d       	andi	r24, 0xDF	; 223
    15ba:	8c 93       	st	X, r24
	/// selecting  channel
	// clear the four bit (MUX4 MUX3 MUX2 MUX1 MUX0 ) to select ADC0
	ClrBit(ADMUX_REG , MUX0);
    15bc:	a7 e2       	ldi	r26, 0x27	; 39
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e7 e2       	ldi	r30, 0x27	; 39
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX1);
    15ca:	a7 e2       	ldi	r26, 0x27	; 39
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e7 e2       	ldi	r30, 0x27	; 39
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8d 7f       	andi	r24, 0xFD	; 253
    15d6:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX2);
    15d8:	a7 e2       	ldi	r26, 0x27	; 39
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e7 e2       	ldi	r30, 0x27	; 39
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8b 7f       	andi	r24, 0xFB	; 251
    15e4:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX3);
    15e6:	a7 e2       	ldi	r26, 0x27	; 39
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e7 e2       	ldi	r30, 0x27	; 39
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	87 7f       	andi	r24, 0xF7	; 247
    15f2:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX4);
    15f4:	a7 e2       	ldi	r26, 0x27	; 39
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e7 e2       	ldi	r30, 0x27	; 39
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8f 7e       	andi	r24, 0xEF	; 239
    1600:	8c 93       	st	X, r24

	//// select  Prescaler
	// To select 128 as devision factor C the three bit (ADPS2 ADPS1 ADPS0 ) on  ADCSRA_REG to
	SetBit(ADCSRA_REG , ADPS0 );
    1602:	a6 e2       	ldi	r26, 0x26	; 38
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e6 e2       	ldi	r30, 0x26	; 38
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	81 60       	ori	r24, 0x01	; 1
    160e:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1610:	a6 e2       	ldi	r26, 0x26	; 38
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e6 e2       	ldi	r30, 0x26	; 38
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    161e:	a6 e2       	ldi	r26, 0x26	; 38
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e6 e2       	ldi	r30, 0x26	; 38
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	82 60       	ori	r24, 0x02	; 2
    162a:	8c 93       	st	X, r24

	/// To Enable Auto Trigger mode -> free running mode
	// set ADATE bit in  ADCSRA_REG
	 SetBit(ADCSRA_REG , ADATE );
    162c:	a6 e2       	ldi	r26, 0x26	; 38
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e6 e2       	ldi	r30, 0x26	; 38
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 62       	ori	r24, 0x20	; 32
    1638:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS2 );
    163a:	a0 e5       	ldi	r26, 0x50	; 80
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e0 e5       	ldi	r30, 0x50	; 80
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 77       	andi	r24, 0x7F	; 127
    1646:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS1 );
    1648:	a0 e5       	ldi	r26, 0x50	; 80
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e0 e5       	ldi	r30, 0x50	; 80
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7b       	andi	r24, 0xBF	; 191
    1654:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS0 );
    1656:	a0 e5       	ldi	r26, 0x50	; 80
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e5       	ldi	r30, 0x50	; 80
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8f 7d       	andi	r24, 0xDF	; 223
    1662:	8c 93       	st	X, r24

	///Enable the ADC circuit
	//set bit ADEN on ADCSRA_REG
	SetBit(ADCSRA_REG , ADEN );
    1664:	a6 e2       	ldi	r26, 0x26	; 38
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e6 e2       	ldi	r30, 0x26	; 38
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG ,ADSC );     //// to start conversion
    M_GIE_void_GIE_EN();          //// to enable  general interrupt
	SetBit(ADCSRA_REG ,ADIE );   //// to enable  ADC interrupt

#endif
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <M_ADC_u16_AdcRead>:
#if  ADC_MODE ==  ADC_POL
u16 M_ADC_u16_AdcRead(void)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	//u16 Local_u16_value = 0;
	////////to start conversion
	//set ADSC bit in  ADCSRA_REG
	SetBit(ADCSRA_REG ,ADSC );
    1680:	a6 e2       	ldi	r26, 0x26	; 38
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e6 e2       	ldi	r30, 0x26	; 38
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	8c 93       	st	X, r24

   /// check  ADC Interrupt Flag to see if conversion completed or not
  	while(GetBit(ADCSRA_REG, ADIF) == 0);
    168e:	e6 e2       	ldi	r30, 0x26	; 38
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	82 95       	swap	r24
    1696:	8f 70       	andi	r24, 0x0F	; 15
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	a9 f3       	breq	.-22     	; 0x168e <M_ADC_u16_AdcRead+0x16>
	return ADC_REG ;
    16a4:	e4 e2       	ldi	r30, 0x24	; 36
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <H_TEMPSENSOR_void_TempSensorInt>:
 *      Author: AbdelRahman Atef
 */
#include "DIO_Int.h"
#include "TEMPSENSOR_Int.h"
void H_TEMPSENSOR_void_TempSensorInt(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
     M_DIO_void_SetPinDirection(PORTA_ID, PIN0, INPUT);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <H_TEMPSENSOR_void_TempSensorRead>:
u8 H_TEMPSENSOR_void_TempSensorRead(void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <H_TEMPSENSOR_void_TempSensorRead+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
  u8 local_u8_AdcReading=0;
    16d4:	1a 82       	std	Y+2, r1	; 0x02
  local_u8_AdcReading = M_ADC_u16_AdcRead();
    16d6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <M_ADC_u16_AdcRead>
    16da:	8a 83       	std	Y+2, r24	; 0x02
  u8 Temp =	  (((u32)local_u8_AdcReading * 500 )/1023);
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	24 ef       	ldi	r18, 0xF4	; 244
    16e8:	31 e0       	ldi	r19, 0x01	; 1
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	2f ef       	ldi	r18, 0xFF	; 255
    16fc:	33 e0       	ldi	r19, 0x03	; 3
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__udivmodsi4>
    170a:	da 01       	movw	r26, r20
    170c:	c9 01       	movw	r24, r18
    170e:	89 83       	std	Y+1, r24	; 0x01
  return Temp;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	62 e0       	ldi	r22, 0x02	; 2
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	63 e0       	ldi	r22, 0x03	; 3
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	65 e0       	ldi	r22, 0x05	; 5
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	66 e0       	ldi	r22, 0x06	; 6
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	67 e0       	ldi	r22, 0x07	; 7
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	67 e0       	ldi	r22, 0x07	; 7
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>


}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	a4 97       	sbiw	r28, 0x24	; 36
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    17a4:	88 a1       	ldd	r24, Y+32	; 0x20
    17a6:	9a e0       	ldi	r25, 0x0A	; 10
    17a8:	69 2f       	mov	r22, r25
    17aa:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__udivmodqi4>
    17ae:	89 2f       	mov	r24, r25
    17b0:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    17b2:	88 a1       	ldd	r24, Y+32	; 0x20
    17b4:	9a e0       	ldi	r25, 0x0A	; 10
    17b6:	69 2f       	mov	r22, r25
    17b8:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__udivmodqi4>
    17bc:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    17be:	1d 8e       	std	Y+29, r1	; 0x1d
    17c0:	77 c4       	rjmp	.+2286   	; 0x20b0 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    17c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c a3       	std	Y+36, r19	; 0x24
    17ca:	2b a3       	std	Y+35, r18	; 0x23
    17cc:	8b a1       	ldd	r24, Y+35	; 0x23
    17ce:	9c a1       	ldd	r25, Y+36	; 0x24
    17d0:	84 30       	cpi	r24, 0x04	; 4
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <H_SSD_Void_SsdDisplay+0x4a>
    17d6:	d7 c0       	rjmp	.+430    	; 0x1986 <H_SSD_Void_SsdDisplay+0x1f8>
    17d8:	2b a1       	ldd	r18, Y+35	; 0x23
    17da:	3c a1       	ldd	r19, Y+36	; 0x24
    17dc:	25 30       	cpi	r18, 0x05	; 5
    17de:	31 05       	cpc	r19, r1
    17e0:	ec f4       	brge	.+58     	; 0x181c <H_SSD_Void_SsdDisplay+0x8e>
    17e2:	8b a1       	ldd	r24, Y+35	; 0x23
    17e4:	9c a1       	ldd	r25, Y+36	; 0x24
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <H_SSD_Void_SsdDisplay+0x60>
    17ec:	60 c0       	rjmp	.+192    	; 0x18ae <H_SSD_Void_SsdDisplay+0x120>
    17ee:	2b a1       	ldd	r18, Y+35	; 0x23
    17f0:	3c a1       	ldd	r19, Y+36	; 0x24
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	2c f4       	brge	.+10     	; 0x1802 <H_SSD_Void_SsdDisplay+0x74>
    17f8:	8b a1       	ldd	r24, Y+35	; 0x23
    17fa:	9c a1       	ldd	r25, Y+36	; 0x24
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	99 f1       	breq	.+102    	; 0x1866 <H_SSD_Void_SsdDisplay+0xd8>
    1800:	99 c1       	rjmp	.+818    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
    1802:	2b a1       	ldd	r18, Y+35	; 0x23
    1804:	3c a1       	ldd	r19, Y+36	; 0x24
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <H_SSD_Void_SsdDisplay+0x80>
    180c:	74 c0       	rjmp	.+232    	; 0x18f6 <H_SSD_Void_SsdDisplay+0x168>
    180e:	8b a1       	ldd	r24, Y+35	; 0x23
    1810:	9c a1       	ldd	r25, Y+36	; 0x24
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <H_SSD_Void_SsdDisplay+0x8c>
    1818:	92 c0       	rjmp	.+292    	; 0x193e <H_SSD_Void_SsdDisplay+0x1b0>
    181a:	8c c1       	rjmp	.+792    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
    181c:	2b a1       	ldd	r18, Y+35	; 0x23
    181e:	3c a1       	ldd	r19, Y+36	; 0x24
    1820:	27 30       	cpi	r18, 0x07	; 7
    1822:	31 05       	cpc	r19, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <H_SSD_Void_SsdDisplay+0x9a>
    1826:	1b c1       	rjmp	.+566    	; 0x1a5e <H_SSD_Void_SsdDisplay+0x2d0>
    1828:	8b a1       	ldd	r24, Y+35	; 0x23
    182a:	9c a1       	ldd	r25, Y+36	; 0x24
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	91 05       	cpc	r25, r1
    1830:	6c f4       	brge	.+26     	; 0x184c <H_SSD_Void_SsdDisplay+0xbe>
    1832:	2b a1       	ldd	r18, Y+35	; 0x23
    1834:	3c a1       	ldd	r19, Y+36	; 0x24
    1836:	25 30       	cpi	r18, 0x05	; 5
    1838:	31 05       	cpc	r19, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <H_SSD_Void_SsdDisplay+0xb0>
    183c:	c8 c0       	rjmp	.+400    	; 0x19ce <H_SSD_Void_SsdDisplay+0x240>
    183e:	8b a1       	ldd	r24, Y+35	; 0x23
    1840:	9c a1       	ldd	r25, Y+36	; 0x24
    1842:	86 30       	cpi	r24, 0x06	; 6
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <H_SSD_Void_SsdDisplay+0xbc>
    1848:	e6 c0       	rjmp	.+460    	; 0x1a16 <H_SSD_Void_SsdDisplay+0x288>
    184a:	74 c1       	rjmp	.+744    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
    184c:	2b a1       	ldd	r18, Y+35	; 0x23
    184e:	3c a1       	ldd	r19, Y+36	; 0x24
    1850:	28 30       	cpi	r18, 0x08	; 8
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <H_SSD_Void_SsdDisplay+0xca>
    1856:	27 c1       	rjmp	.+590    	; 0x1aa6 <H_SSD_Void_SsdDisplay+0x318>
    1858:	8b a1       	ldd	r24, Y+35	; 0x23
    185a:	9c a1       	ldd	r25, Y+36	; 0x24
    185c:	89 30       	cpi	r24, 0x09	; 9
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <H_SSD_Void_SsdDisplay+0xd6>
    1862:	45 c1       	rjmp	.+650    	; 0x1aee <H_SSD_Void_SsdDisplay+0x360>
    1864:	67 c1       	rjmp	.+718    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	64 e0       	ldi	r22, 0x04	; 4
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	65 e0       	ldi	r22, 0x05	; 5
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	66 e0       	ldi	r22, 0x06	; 6
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    18ac:	43 c1       	rjmp	.+646    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	62 e0       	ldi	r22, 0x02	; 2
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	63 e0       	ldi	r22, 0x03	; 3
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	64 e0       	ldi	r22, 0x04	; 4
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	65 e0       	ldi	r22, 0x05	; 5
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	66 e0       	ldi	r22, 0x06	; 6
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    18f4:	1f c1       	rjmp	.+574    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	63 e0       	ldi	r22, 0x03	; 3
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	64 e0       	ldi	r22, 0x04	; 4
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	65 e0       	ldi	r22, 0x05	; 5
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	66 e0       	ldi	r22, 0x06	; 6
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    193c:	fb c0       	rjmp	.+502    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	63 e0       	ldi	r22, 0x03	; 3
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	64 e0       	ldi	r22, 0x04	; 4
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	65 e0       	ldi	r22, 0x05	; 5
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	66 e0       	ldi	r22, 0x06	; 6
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1984:	d7 c0       	rjmp	.+430    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	64 e0       	ldi	r22, 0x04	; 4
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    19cc:	b3 c0       	rjmp	.+358    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	63 e0       	ldi	r22, 0x03	; 3
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	64 e0       	ldi	r22, 0x04	; 4
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	65 e0       	ldi	r22, 0x05	; 5
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	66 e0       	ldi	r22, 0x06	; 6
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1a14:	8f c0       	rjmp	.+286    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	62 e0       	ldi	r22, 0x02	; 2
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	64 e0       	ldi	r22, 0x04	; 4
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	66 e0       	ldi	r22, 0x06	; 6
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1a5c:	6b c0       	rjmp	.+214    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	65 e0       	ldi	r22, 0x05	; 5
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	66 e0       	ldi	r22, 0x06	; 6
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1aa4:	47 c0       	rjmp	.+142    	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	63 e0       	ldi	r22, 0x03	; 3
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	65 e0       	ldi	r22, 0x05	; 5
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	66 e0       	ldi	r22, 0x06	; 6
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1aec:	23 c0       	rjmp	.+70     	; 0x1b34 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	63 e0       	ldi	r22, 0x03	; 3
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	65 e0       	ldi	r22, 0x05	; 5
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	66 e0       	ldi	r22, 0x06	; 6
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	67 e0       	ldi	r22, 0x07	; 7
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	89 8f       	std	Y+25, r24	; 0x19
    1b52:	9a 8f       	std	Y+26, r25	; 0x1a
    1b54:	ab 8f       	std	Y+27, r26	; 0x1b
    1b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8d 8b       	std	Y+21, r24	; 0x15
    1b72:	9e 8b       	std	Y+22, r25	; 0x16
    1b74:	af 8b       	std	Y+23, r26	; 0x17
    1b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <H_SSD_Void_SsdDisplay+0x46c>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a 8b       	std	Y+18, r25	; 0x12
    1be2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	9a 89       	ldd	r25, Y+18	; 0x12
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <H_SSD_Void_SsdDisplay+0x45a>
    1bec:	9a 8b       	std	Y+18, r25	; 0x12
    1bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <H_SSD_Void_SsdDisplay+0x44e>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	98 8b       	std	Y+16, r25	; 0x10
    1c1e:	8f 87       	std	Y+15, r24	; 0x0f
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <H_SSD_Void_SsdDisplay+0x496>
    1c28:	98 8b       	std	Y+16, r25	; 0x10
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	66 e0       	ldi	r22, 0x06	; 6
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    1c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3a a3       	std	Y+34, r19	; 0x22
    1c3e:	29 a3       	std	Y+33, r18	; 0x21
    1c40:	89 a1       	ldd	r24, Y+33	; 0x21
    1c42:	9a a1       	ldd	r25, Y+34	; 0x22
    1c44:	84 30       	cpi	r24, 0x04	; 4
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <H_SSD_Void_SsdDisplay+0x4be>
    1c4a:	d7 c0       	rjmp	.+430    	; 0x1dfa <H_SSD_Void_SsdDisplay+0x66c>
    1c4c:	29 a1       	ldd	r18, Y+33	; 0x21
    1c4e:	3a a1       	ldd	r19, Y+34	; 0x22
    1c50:	25 30       	cpi	r18, 0x05	; 5
    1c52:	31 05       	cpc	r19, r1
    1c54:	ec f4       	brge	.+58     	; 0x1c90 <H_SSD_Void_SsdDisplay+0x502>
    1c56:	89 a1       	ldd	r24, Y+33	; 0x21
    1c58:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <H_SSD_Void_SsdDisplay+0x4d4>
    1c60:	60 c0       	rjmp	.+192    	; 0x1d22 <H_SSD_Void_SsdDisplay+0x594>
    1c62:	29 a1       	ldd	r18, Y+33	; 0x21
    1c64:	3a a1       	ldd	r19, Y+34	; 0x22
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <H_SSD_Void_SsdDisplay+0x4e8>
    1c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	99 f1       	breq	.+102    	; 0x1cda <H_SSD_Void_SsdDisplay+0x54c>
    1c74:	99 c1       	rjmp	.+818    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
    1c76:	29 a1       	ldd	r18, Y+33	; 0x21
    1c78:	3a a1       	ldd	r19, Y+34	; 0x22
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <H_SSD_Void_SsdDisplay+0x4f4>
    1c80:	74 c0       	rjmp	.+232    	; 0x1d6a <H_SSD_Void_SsdDisplay+0x5dc>
    1c82:	89 a1       	ldd	r24, Y+33	; 0x21
    1c84:	9a a1       	ldd	r25, Y+34	; 0x22
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <H_SSD_Void_SsdDisplay+0x500>
    1c8c:	92 c0       	rjmp	.+292    	; 0x1db2 <H_SSD_Void_SsdDisplay+0x624>
    1c8e:	8c c1       	rjmp	.+792    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
    1c90:	29 a1       	ldd	r18, Y+33	; 0x21
    1c92:	3a a1       	ldd	r19, Y+34	; 0x22
    1c94:	27 30       	cpi	r18, 0x07	; 7
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <H_SSD_Void_SsdDisplay+0x50e>
    1c9a:	1b c1       	rjmp	.+566    	; 0x1ed2 <H_SSD_Void_SsdDisplay+0x744>
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	6c f4       	brge	.+26     	; 0x1cc0 <H_SSD_Void_SsdDisplay+0x532>
    1ca6:	29 a1       	ldd	r18, Y+33	; 0x21
    1ca8:	3a a1       	ldd	r19, Y+34	; 0x22
    1caa:	25 30       	cpi	r18, 0x05	; 5
    1cac:	31 05       	cpc	r19, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <H_SSD_Void_SsdDisplay+0x524>
    1cb0:	c8 c0       	rjmp	.+400    	; 0x1e42 <H_SSD_Void_SsdDisplay+0x6b4>
    1cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb6:	86 30       	cpi	r24, 0x06	; 6
    1cb8:	91 05       	cpc	r25, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <H_SSD_Void_SsdDisplay+0x530>
    1cbc:	e6 c0       	rjmp	.+460    	; 0x1e8a <H_SSD_Void_SsdDisplay+0x6fc>
    1cbe:	74 c1       	rjmp	.+744    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
    1cc0:	29 a1       	ldd	r18, Y+33	; 0x21
    1cc2:	3a a1       	ldd	r19, Y+34	; 0x22
    1cc4:	28 30       	cpi	r18, 0x08	; 8
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <H_SSD_Void_SsdDisplay+0x53e>
    1cca:	27 c1       	rjmp	.+590    	; 0x1f1a <H_SSD_Void_SsdDisplay+0x78c>
    1ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cce:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd0:	89 30       	cpi	r24, 0x09	; 9
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <H_SSD_Void_SsdDisplay+0x54a>
    1cd6:	45 c1       	rjmp	.+650    	; 0x1f62 <H_SSD_Void_SsdDisplay+0x7d4>
    1cd8:	67 c1       	rjmp	.+718    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	63 e0       	ldi	r22, 0x03	; 3
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	64 e0       	ldi	r22, 0x04	; 4
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	65 e0       	ldi	r22, 0x05	; 5
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	66 e0       	ldi	r22, 0x06	; 6
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1d20:	43 c1       	rjmp	.+646    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	63 e0       	ldi	r22, 0x03	; 3
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	66 e0       	ldi	r22, 0x06	; 6
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1d68:	1f c1       	rjmp	.+574    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	61 e0       	ldi	r22, 0x01	; 1
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	62 e0       	ldi	r22, 0x02	; 2
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	63 e0       	ldi	r22, 0x03	; 3
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	64 e0       	ldi	r22, 0x04	; 4
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	65 e0       	ldi	r22, 0x05	; 5
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	66 e0       	ldi	r22, 0x06	; 6
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1db0:	fb c0       	rjmp	.+502    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	63 e0       	ldi	r22, 0x03	; 3
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	64 e0       	ldi	r22, 0x04	; 4
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	66 e0       	ldi	r22, 0x06	; 6
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1df8:	d7 c0       	rjmp	.+430    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1e40:	b3 c0       	rjmp	.+358    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	63 e0       	ldi	r22, 0x03	; 3
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	65 e0       	ldi	r22, 0x05	; 5
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	66 e0       	ldi	r22, 0x06	; 6
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1e88:	8f c0       	rjmp	.+286    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	64 e0       	ldi	r22, 0x04	; 4
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	65 e0       	ldi	r22, 0x05	; 5
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	66 e0       	ldi	r22, 0x06	; 6
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1ed0:	6b c0       	rjmp	.+214    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	63 e0       	ldi	r22, 0x03	; 3
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	64 e0       	ldi	r22, 0x04	; 4
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	65 e0       	ldi	r22, 0x05	; 5
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1f18:	47 c0       	rjmp	.+142    	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	61 e0       	ldi	r22, 0x01	; 1
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	63 e0       	ldi	r22, 0x03	; 3
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	64 e0       	ldi	r22, 0x04	; 4
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	65 e0       	ldi	r22, 0x05	; 5
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	66 e0       	ldi	r22, 0x06	; 6
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1f60:	23 c0       	rjmp	.+70     	; 0x1fa8 <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	64 e0       	ldi	r22, 0x04	; 4
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	66 e0       	ldi	r22, 0x06	; 6
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	66 e0       	ldi	r22, 0x06	; 6
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	67 e0       	ldi	r22, 0x07	; 7
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a0 e8       	ldi	r26, 0x80	; 128
    1fc2:	bf e3       	ldi	r27, 0x3F	; 63
    1fc4:	8b 87       	std	Y+11, r24	; 0x0b
    1fc6:	9c 87       	std	Y+12, r25	; 0x0c
    1fc8:	ad 87       	std	Y+13, r26	; 0x0d
    1fca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a e7       	ldi	r20, 0x7A	; 122
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8f 83       	std	Y+7, r24	; 0x07
    1fe6:	98 87       	std	Y+8, r25	; 0x08
    1fe8:	a9 87       	std	Y+9, r26	; 0x09
    1fea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	3f c0       	rjmp	.+126    	; 0x208c <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	4c f5       	brge	.+82     	; 0x2078 <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	6b 85       	ldd	r22, Y+11	; 0x0b
    2028:	7c 85       	ldd	r23, Y+12	; 0x0c
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	9e 85       	ldd	r25, Y+14	; 0x0e
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	0f c0       	rjmp	.+30     	; 0x206e <H_SSD_Void_SsdDisplay+0x8e0>
    2050:	89 e1       	ldi	r24, 0x19	; 25
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <H_SSD_Void_SsdDisplay+0x8ce>
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	69 f7       	brne	.-38     	; 0x2050 <H_SSD_Void_SsdDisplay+0x8c2>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <H_SSD_Void_SsdDisplay+0x90a>
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	67 e0       	ldi	r22, 0x07	; 7
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    20aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	8d 8f       	std	Y+29, r24	; 0x1d
    20b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b2:	88 3c       	cpi	r24, 0xC8	; 200
    20b4:	08 f4       	brcc	.+2      	; 0x20b8 <H_SSD_Void_SsdDisplay+0x92a>
    20b6:	85 cb       	rjmp	.-2294   	; 0x17c2 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    20b8:	a4 96       	adiw	r28, 0x24	; 36
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <H_SSD_Void_SsdDisplayCountDown+0x6>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    20d6:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	0e 94 c7 0b 	call	0x178e	; 0x178e <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	81 50       	subi	r24, 0x01	; 1
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	88 23       	and	r24, r24
    20ee:	bc f7       	brge	.-18     	; 0x20de <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <H_PushButton_void_PushButtonInt+0x6>
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	3b 83       	std	Y+3, r19	; 0x03
    2110:	2a 83       	std	Y+2, r18	; 0x02
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	91 05       	cpc	r25, r1
    211a:	e1 f0       	breq	.+56     	; 0x2154 <H_PushButton_void_PushButtonInt+0x5a>
    211c:	2a 81       	ldd	r18, Y+2	; 0x02
    211e:	3b 81       	ldd	r19, Y+3	; 0x03
    2120:	23 30       	cpi	r18, 0x03	; 3
    2122:	31 05       	cpc	r19, r1
    2124:	34 f4       	brge	.+12     	; 0x2132 <H_PushButton_void_PushButtonInt+0x38>
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	61 f0       	breq	.+24     	; 0x2148 <H_PushButton_void_PushButtonInt+0x4e>
    2130:	22 c0       	rjmp	.+68     	; 0x2176 <H_PushButton_void_PushButtonInt+0x7c>
    2132:	2a 81       	ldd	r18, Y+2	; 0x02
    2134:	3b 81       	ldd	r19, Y+3	; 0x03
    2136:	23 30       	cpi	r18, 0x03	; 3
    2138:	31 05       	cpc	r19, r1
    213a:	91 f0       	breq	.+36     	; 0x2160 <H_PushButton_void_PushButtonInt+0x66>
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	9b 81       	ldd	r25, Y+3	; 0x03
    2140:	84 30       	cpi	r24, 0x04	; 4
    2142:	91 05       	cpc	r25, r1
    2144:	99 f0       	breq	.+38     	; 0x216c <H_PushButton_void_PushButtonInt+0x72>
    2146:	17 c0       	rjmp	.+46     	; 0x2176 <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	62 e0       	ldi	r22, 0x02	; 2
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    2152:	11 c0       	rjmp	.+34     	; 0x2176 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    215e:	0b c0       	rjmp	.+22     	; 0x2176 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	65 e0       	ldi	r22, 0x05	; 5
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	ec 97       	sbiw	r28, 0x3c	; 60
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    2198:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    219a:	8a ad       	ldd	r24, Y+58	; 0x3a
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3c af       	std	Y+60, r19	; 0x3c
    21a2:	2b af       	std	Y+59, r18	; 0x3b
    21a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    21a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <H_PushButton_u8_PushButtonRead+0x2e>
    21ae:	a2 c0       	rjmp	.+324    	; 0x22f4 <H_PushButton_u8_PushButtonRead+0x172>
    21b0:	2b ad       	ldd	r18, Y+59	; 0x3b
    21b2:	3c ad       	ldd	r19, Y+60	; 0x3c
    21b4:	23 30       	cpi	r18, 0x03	; 3
    21b6:	31 05       	cpc	r19, r1
    21b8:	34 f4       	brge	.+12     	; 0x21c6 <H_PushButton_u8_PushButtonRead+0x44>
    21ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    21bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	91 05       	cpc	r25, r1
    21c2:	71 f0       	breq	.+28     	; 0x21e0 <H_PushButton_u8_PushButtonRead+0x5e>
    21c4:	33 c2       	rjmp	.+1126   	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
    21c6:	2b ad       	ldd	r18, Y+59	; 0x3b
    21c8:	3c ad       	ldd	r19, Y+60	; 0x3c
    21ca:	23 30       	cpi	r18, 0x03	; 3
    21cc:	31 05       	cpc	r19, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <H_PushButton_u8_PushButtonRead+0x50>
    21d0:	1b c1       	rjmp	.+566    	; 0x2408 <H_PushButton_u8_PushButtonRead+0x286>
    21d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    21d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    21d6:	84 30       	cpi	r24, 0x04	; 4
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <H_PushButton_u8_PushButtonRead+0x5c>
    21dc:	9f c1       	rjmp	.+830    	; 0x251c <H_PushButton_u8_PushButtonRead+0x39a>
    21de:	26 c2       	rjmp	.+1100   	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    21e8:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    21ea:	89 ad       	ldd	r24, Y+57	; 0x39
    21ec:	88 23       	and	r24, r24
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <H_PushButton_u8_PushButtonRead+0x70>
    21f0:	1d c2       	rjmp	.+1082   	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e7       	ldi	r26, 0x70	; 112
    21f8:	b2 e4       	ldi	r27, 0x42	; 66
    21fa:	8d ab       	std	Y+53, r24	; 0x35
    21fc:	9e ab       	std	Y+54, r25	; 0x36
    21fe:	af ab       	std	Y+55, r26	; 0x37
    2200:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2202:	6d a9       	ldd	r22, Y+53	; 0x35
    2204:	7e a9       	ldd	r23, Y+54	; 0x36
    2206:	8f a9       	ldd	r24, Y+55	; 0x37
    2208:	98 ad       	ldd	r25, Y+56	; 0x38
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4a e7       	ldi	r20, 0x7A	; 122
    2210:	53 e4       	ldi	r21, 0x43	; 67
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	89 ab       	std	Y+49, r24	; 0x31
    221c:	9a ab       	std	Y+50, r25	; 0x32
    221e:	ab ab       	std	Y+51, r26	; 0x33
    2220:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2222:	69 a9       	ldd	r22, Y+49	; 0x31
    2224:	7a a9       	ldd	r23, Y+50	; 0x32
    2226:	8b a9       	ldd	r24, Y+51	; 0x33
    2228:	9c a9       	ldd	r25, Y+52	; 0x34
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	2c f4       	brge	.+10     	; 0x2244 <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	98 ab       	std	Y+48, r25	; 0x30
    2240:	8f a7       	std	Y+47, r24	; 0x2f
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    2244:	69 a9       	ldd	r22, Y+49	; 0x31
    2246:	7a a9       	ldd	r23, Y+50	; 0x32
    2248:	8b a9       	ldd	r24, Y+51	; 0x33
    224a:	9c a9       	ldd	r25, Y+52	; 0x34
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	4c f5       	brge	.+82     	; 0x22ae <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225c:	6d a9       	ldd	r22, Y+53	; 0x35
    225e:	7e a9       	ldd	r23, Y+54	; 0x36
    2260:	8f a9       	ldd	r24, Y+55	; 0x37
    2262:	98 ad       	ldd	r25, Y+56	; 0x38
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e2       	ldi	r20, 0x20	; 32
    226a:	51 e4       	ldi	r21, 0x41	; 65
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	98 ab       	std	Y+48, r25	; 0x30
    2282:	8f a7       	std	Y+47, r24	; 0x2f
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <H_PushButton_u8_PushButtonRead+0x122>
    2286:	89 e1       	ldi	r24, 0x19	; 25
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9e a7       	std	Y+46, r25	; 0x2e
    228c:	8d a7       	std	Y+45, r24	; 0x2d
    228e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2290:	9e a5       	ldd	r25, Y+46	; 0x2e
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <H_PushButton_u8_PushButtonRead+0x110>
    2296:	9e a7       	std	Y+46, r25	; 0x2e
    2298:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	8f a5       	ldd	r24, Y+47	; 0x2f
    229c:	98 a9       	ldd	r25, Y+48	; 0x30
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	98 ab       	std	Y+48, r25	; 0x30
    22a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a6:	98 a9       	ldd	r25, Y+48	; 0x30
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	69 f7       	brne	.-38     	; 0x2286 <H_PushButton_u8_PushButtonRead+0x104>
    22ac:	14 c0       	rjmp	.+40     	; 0x22d6 <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	69 a9       	ldd	r22, Y+49	; 0x31
    22b0:	7a a9       	ldd	r23, Y+50	; 0x32
    22b2:	8b a9       	ldd	r24, Y+51	; 0x33
    22b4:	9c a9       	ldd	r25, Y+52	; 0x34
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	98 ab       	std	Y+48, r25	; 0x30
    22c0:	8f a7       	std	Y+47, r24	; 0x2f
    22c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c4:	98 a9       	ldd	r25, Y+48	; 0x30
    22c6:	9c a7       	std	Y+44, r25	; 0x2c
    22c8:	8b a7       	std	Y+43, r24	; 0x2b
    22ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    22cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <H_PushButton_u8_PushButtonRead+0x14c>
    22d2:	9c a7       	std	Y+44, r25	; 0x2c
    22d4:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    22d6:	84 e0       	ldi	r24, 0x04	; 4
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    22de:	88 23       	and	r24, r24
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <H_PushButton_u8_PushButtonRead+0x162>
    22e2:	a4 c1       	rjmp	.+840    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    22e4:	84 e0       	ldi	r24, 0x04	; 4
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    22ec:	88 23       	and	r24, r24
    22ee:	d1 f3       	breq	.-12     	; 0x22e4 <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    22f0:	19 ae       	std	Y+57, r1	; 0x39
    22f2:	9c c1       	rjmp	.+824    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    22f4:	84 e0       	ldi	r24, 0x04	; 4
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    22fc:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    22fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2300:	88 23       	and	r24, r24
    2302:	09 f0       	breq	.+2      	; 0x2306 <H_PushButton_u8_PushButtonRead+0x184>
    2304:	93 c1       	rjmp	.+806    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e7       	ldi	r26, 0x70	; 112
    230c:	b2 e4       	ldi	r27, 0x42	; 66
    230e:	8f a3       	std	Y+39, r24	; 0x27
    2310:	98 a7       	std	Y+40, r25	; 0x28
    2312:	a9 a7       	std	Y+41, r26	; 0x29
    2314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6f a1       	ldd	r22, Y+39	; 0x27
    2318:	78 a5       	ldd	r23, Y+40	; 0x28
    231a:	89 a5       	ldd	r24, Y+41	; 0x29
    231c:	9a a5       	ldd	r25, Y+42	; 0x2a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a e7       	ldi	r20, 0x7A	; 122
    2324:	53 e4       	ldi	r21, 0x43	; 67
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8b a3       	std	Y+35, r24	; 0x23
    2330:	9c a3       	std	Y+36, r25	; 0x24
    2332:	ad a3       	std	Y+37, r26	; 0x25
    2334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6f a1       	ldd	r22, Y+39	; 0x27
    2372:	78 a5       	ldd	r23, Y+40	; 0x28
    2374:	89 a5       	ldd	r24, Y+41	; 0x29
    2376:	9a a5       	ldd	r25, Y+42	; 0x2a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <H_PushButton_u8_PushButtonRead+0x236>
    239a:	89 e1       	ldi	r24, 0x19	; 25
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	98 a3       	std	Y+32, r25	; 0x20
    23a0:	8f 8f       	std	Y+31, r24	; 0x1f
    23a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a4:	98 a1       	ldd	r25, Y+32	; 0x20
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <H_PushButton_u8_PushButtonRead+0x224>
    23aa:	98 a3       	std	Y+32, r25	; 0x20
    23ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	89 a1       	ldd	r24, Y+33	; 0x21
    23b0:	9a a1       	ldd	r25, Y+34	; 0x22
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <H_PushButton_u8_PushButtonRead+0x218>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6b a1       	ldd	r22, Y+35	; 0x23
    23c4:	7c a1       	ldd	r23, Y+36	; 0x24
    23c6:	8d a1       	ldd	r24, Y+37	; 0x25
    23c8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
    23d6:	89 a1       	ldd	r24, Y+33	; 0x21
    23d8:	9a a1       	ldd	r25, Y+34	; 0x22
    23da:	9e 8f       	std	Y+30, r25	; 0x1e
    23dc:	8d 8f       	std	Y+29, r24	; 0x1d
    23de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <H_PushButton_u8_PushButtonRead+0x260>
    23e6:	9e 8f       	std	Y+30, r25	; 0x1e
    23e8:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	63 e0       	ldi	r22, 0x03	; 3
    23ee:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    23f2:	88 23       	and	r24, r24
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <H_PushButton_u8_PushButtonRead+0x276>
    23f6:	1a c1       	rjmp	.+564    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    23f8:	84 e0       	ldi	r24, 0x04	; 4
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2400:	88 23       	and	r24, r24
    2402:	d1 f3       	breq	.-12     	; 0x23f8 <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    2404:	19 ae       	std	Y+57, r1	; 0x39
    2406:	12 c1       	rjmp	.+548    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    2408:	84 e0       	ldi	r24, 0x04	; 4
    240a:	64 e0       	ldi	r22, 0x04	; 4
    240c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2410:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    2412:	89 ad       	ldd	r24, Y+57	; 0x39
    2414:	88 23       	and	r24, r24
    2416:	09 f0       	breq	.+2      	; 0x241a <H_PushButton_u8_PushButtonRead+0x298>
    2418:	09 c1       	rjmp	.+530    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e7       	ldi	r26, 0x70	; 112
    2420:	b2 e4       	ldi	r27, 0x42	; 66
    2422:	89 8f       	std	Y+25, r24	; 0x19
    2424:	9a 8f       	std	Y+26, r25	; 0x1a
    2426:	ab 8f       	std	Y+27, r26	; 0x1b
    2428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a e7       	ldi	r20, 0x7A	; 122
    2438:	53 e4       	ldi	r21, 0x43	; 67
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 8b       	std	Y+21, r24	; 0x15
    2444:	9e 8b       	std	Y+22, r25	; 0x16
    2446:	af 8b       	std	Y+23, r26	; 0x17
    2448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <H_PushButton_u8_PushButtonRead+0x34a>
    24ae:	89 e1       	ldi	r24, 0x19	; 25
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	89 89       	ldd	r24, Y+17	; 0x11
    24b8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <H_PushButton_u8_PushButtonRead+0x338>
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <H_PushButton_u8_PushButtonRead+0x32c>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <H_PushButton_u8_PushButtonRead+0x374>
    24fa:	98 8b       	std	Y+16, r25	; 0x10
    24fc:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    24fe:	84 e0       	ldi	r24, 0x04	; 4
    2500:	64 e0       	ldi	r22, 0x04	; 4
    2502:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2506:	88 23       	and	r24, r24
    2508:	09 f0       	breq	.+2      	; 0x250c <H_PushButton_u8_PushButtonRead+0x38a>
    250a:	90 c0       	rjmp	.+288    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    250c:	84 e0       	ldi	r24, 0x04	; 4
    250e:	64 e0       	ldi	r22, 0x04	; 4
    2510:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2514:	88 23       	and	r24, r24
    2516:	d1 f3       	breq	.-12     	; 0x250c <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    2518:	19 ae       	std	Y+57, r1	; 0x39
    251a:	88 c0       	rjmp	.+272    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2524:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    2526:	89 ad       	ldd	r24, Y+57	; 0x39
    2528:	88 23       	and	r24, r24
    252a:	09 f0       	breq	.+2      	; 0x252e <H_PushButton_u8_PushButtonRead+0x3ac>
    252c:	7f c0       	rjmp	.+254    	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e7       	ldi	r26, 0x70	; 112
    2534:	b2 e4       	ldi	r27, 0x42	; 66
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <H_PushButton_u8_PushButtonRead+0x45e>
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <H_PushButton_u8_PushButtonRead+0x44c>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <H_PushButton_u8_PushButtonRead+0x440>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <H_PushButton_u8_PushButtonRead+0x488>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2612:	84 e0       	ldi	r24, 0x04	; 4
    2614:	65 e0       	ldi	r22, 0x05	; 5
    2616:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    261a:	88 23       	and	r24, r24
    261c:	39 f4       	brne	.+14     	; 0x262c <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    261e:	84 e0       	ldi	r24, 0x04	; 4
    2620:	65 e0       	ldi	r22, 0x05	; 5
    2622:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    2626:	88 23       	and	r24, r24
    2628:	d1 f3       	breq	.-12     	; 0x261e <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    262a:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    262c:	89 ad       	ldd	r24, Y+57	; 0x39
}
    262e:	ec 96       	adiw	r28, 0x3c	; 60
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <H_LED_Void_LedInit+0x6>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	3b 83       	std	Y+3, r19	; 0x03
    2656:	2a 83       	std	Y+2, r18	; 0x02
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	91 05       	cpc	r25, r1
    2660:	11 f1       	breq	.+68     	; 0x26a6 <H_LED_Void_LedInit+0x66>
    2662:	2a 81       	ldd	r18, Y+2	; 0x02
    2664:	3b 81       	ldd	r19, Y+3	; 0x03
    2666:	23 30       	cpi	r18, 0x03	; 3
    2668:	31 05       	cpc	r19, r1
    266a:	34 f4       	brge	.+12     	; 0x2678 <H_LED_Void_LedInit+0x38>
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	91 05       	cpc	r25, r1
    2674:	61 f0       	breq	.+24     	; 0x268e <H_LED_Void_LedInit+0x4e>
    2676:	22 c0       	rjmp	.+68     	; 0x26bc <H_LED_Void_LedInit+0x7c>
    2678:	2a 81       	ldd	r18, Y+2	; 0x02
    267a:	3b 81       	ldd	r19, Y+3	; 0x03
    267c:	23 30       	cpi	r18, 0x03	; 3
    267e:	31 05       	cpc	r19, r1
    2680:	61 f0       	breq	.+24     	; 0x269a <H_LED_Void_LedInit+0x5a>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	84 30       	cpi	r24, 0x04	; 4
    2688:	91 05       	cpc	r25, r1
    268a:	99 f0       	breq	.+38     	; 0x26b2 <H_LED_Void_LedInit+0x72>
    268c:	17 c0       	rjmp	.+46     	; 0x26bc <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    2698:	11 c0       	rjmp	.+34     	; 0x26bc <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    26a4:	0b c0       	rjmp	.+22     	; 0x26bc <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	62 e0       	ldi	r22, 0x02	; 2
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    26b2:	83 e0       	ldi	r24, 0x03	; 3
    26b4:	63 e0       	ldi	r22, 0x03	; 3
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <H_LED_Void_LedOn+0x6>
    26ce:	0f 92       	push	r0
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	3b 83       	std	Y+3, r19	; 0x03
    26de:	2a 83       	std	Y+2, r18	; 0x02
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	91 05       	cpc	r25, r1
    26e8:	11 f1       	breq	.+68     	; 0x272e <H_LED_Void_LedOn+0x66>
    26ea:	2a 81       	ldd	r18, Y+2	; 0x02
    26ec:	3b 81       	ldd	r19, Y+3	; 0x03
    26ee:	23 30       	cpi	r18, 0x03	; 3
    26f0:	31 05       	cpc	r19, r1
    26f2:	34 f4       	brge	.+12     	; 0x2700 <H_LED_Void_LedOn+0x38>
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	91 05       	cpc	r25, r1
    26fc:	61 f0       	breq	.+24     	; 0x2716 <H_LED_Void_LedOn+0x4e>
    26fe:	22 c0       	rjmp	.+68     	; 0x2744 <H_LED_Void_LedOn+0x7c>
    2700:	2a 81       	ldd	r18, Y+2	; 0x02
    2702:	3b 81       	ldd	r19, Y+3	; 0x03
    2704:	23 30       	cpi	r18, 0x03	; 3
    2706:	31 05       	cpc	r19, r1
    2708:	61 f0       	breq	.+24     	; 0x2722 <H_LED_Void_LedOn+0x5a>
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	84 30       	cpi	r24, 0x04	; 4
    2710:	91 05       	cpc	r25, r1
    2712:	99 f0       	breq	.+38     	; 0x273a <H_LED_Void_LedOn+0x72>
    2714:	17 c0       	rjmp	.+46     	; 0x2744 <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2720:	11 c0       	rjmp	.+34     	; 0x2744 <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    272c:	0b c0       	rjmp	.+22     	; 0x2744 <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	63 e0       	ldi	r22, 0x03	; 3
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <H_LED_Void_LedOff+0x6>
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	3b 83       	std	Y+3, r19	; 0x03
    2766:	2a 83       	std	Y+2, r18	; 0x02
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	91 05       	cpc	r25, r1
    2770:	b1 f0       	breq	.+44     	; 0x279e <H_LED_Void_LedOff+0x4e>
    2772:	2a 81       	ldd	r18, Y+2	; 0x02
    2774:	3b 81       	ldd	r19, Y+3	; 0x03
    2776:	23 30       	cpi	r18, 0x03	; 3
    2778:	31 05       	cpc	r19, r1
    277a:	34 f4       	brge	.+12     	; 0x2788 <H_LED_Void_LedOff+0x38>
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	91 05       	cpc	r25, r1
    2784:	91 f0       	breq	.+36     	; 0x27aa <H_LED_Void_LedOff+0x5a>
    2786:	22 c0       	rjmp	.+68     	; 0x27cc <H_LED_Void_LedOff+0x7c>
    2788:	2a 81       	ldd	r18, Y+2	; 0x02
    278a:	3b 81       	ldd	r19, Y+3	; 0x03
    278c:	23 30       	cpi	r18, 0x03	; 3
    278e:	31 05       	cpc	r19, r1
    2790:	91 f0       	breq	.+36     	; 0x27b6 <H_LED_Void_LedOff+0x66>
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	84 30       	cpi	r24, 0x04	; 4
    2798:	91 05       	cpc	r25, r1
    279a:	99 f0       	breq	.+38     	; 0x27c2 <H_LED_Void_LedOff+0x72>
    279c:	17 c0       	rjmp	.+46     	; 0x27cc <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	62 e0       	ldi	r22, 0x02	; 2
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    27a8:	11 c0       	rjmp	.+34     	; 0x27cc <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    27b4:	0b c0       	rjmp	.+22     	; 0x27cc <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    27c2:	83 e0       	ldi	r24, 0x03	; 3
    27c4:	63 e0       	ldi	r22, 0x03	; 3
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <H_LED_Void_LedTogg+0x6>
    27de:	0f 92       	push	r0
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3b 83       	std	Y+3, r19	; 0x03
    27ee:	2a 83       	std	Y+2, r18	; 0x02
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	91 05       	cpc	r25, r1
    27f8:	b1 f0       	breq	.+44     	; 0x2826 <H_LED_Void_LedTogg+0x4e>
    27fa:	2a 81       	ldd	r18, Y+2	; 0x02
    27fc:	3b 81       	ldd	r19, Y+3	; 0x03
    27fe:	23 30       	cpi	r18, 0x03	; 3
    2800:	31 05       	cpc	r19, r1
    2802:	34 f4       	brge	.+12     	; 0x2810 <H_LED_Void_LedTogg+0x38>
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	81 30       	cpi	r24, 0x01	; 1
    280a:	91 05       	cpc	r25, r1
    280c:	89 f0       	breq	.+34     	; 0x2830 <H_LED_Void_LedTogg+0x58>
    280e:	1e c0       	rjmp	.+60     	; 0x284c <H_LED_Void_LedTogg+0x74>
    2810:	2a 81       	ldd	r18, Y+2	; 0x02
    2812:	3b 81       	ldd	r19, Y+3	; 0x03
    2814:	23 30       	cpi	r18, 0x03	; 3
    2816:	31 05       	cpc	r19, r1
    2818:	81 f0       	breq	.+32     	; 0x283a <H_LED_Void_LedTogg+0x62>
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	84 30       	cpi	r24, 0x04	; 4
    2820:	91 05       	cpc	r25, r1
    2822:	81 f0       	breq	.+32     	; 0x2844 <H_LED_Void_LedTogg+0x6c>
    2824:	13 c0       	rjmp	.+38     	; 0x284c <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	62 e0       	ldi	r22, 0x02	; 2
    282a:	0e 94 cd 09 	call	0x139a	; 0x139a <M_DIO_void_PinTog>
    282e:	0e c0       	rjmp	.+28     	; 0x284c <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	0e 94 cd 09 	call	0x139a	; 0x139a <M_DIO_void_PinTog>
    2838:	09 c0       	rjmp	.+18     	; 0x284c <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	0e 94 cd 09 	call	0x139a	; 0x139a <M_DIO_void_PinTog>
    2842:	04 c0       	rjmp	.+8      	; 0x284c <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	63 e0       	ldi	r22, 0x03	; 3
    2848:	0e 94 cd 09 	call	0x139a	; 0x139a <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	eb 97       	sbiw	r28, 0x3b	; 59
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    286e:	89 ad       	ldd	r24, Y+57	; 0x39
    2870:	28 2f       	mov	r18, r24
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	3b af       	std	Y+59, r19	; 0x3b
    2876:	2a af       	std	Y+58, r18	; 0x3a
    2878:	8a ad       	ldd	r24, Y+58	; 0x3a
    287a:	9b ad       	ldd	r25, Y+59	; 0x3b
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	91 05       	cpc	r25, r1
    2880:	c9 f0       	breq	.+50     	; 0x28b4 <H_LED_Void_LedBlink+0x5c>
    2882:	2a ad       	ldd	r18, Y+58	; 0x3a
    2884:	3b ad       	ldd	r19, Y+59	; 0x3b
    2886:	23 30       	cpi	r18, 0x03	; 3
    2888:	31 05       	cpc	r19, r1
    288a:	3c f4       	brge	.+14     	; 0x289a <H_LED_Void_LedBlink+0x42>
    288c:	8a ad       	ldd	r24, Y+58	; 0x3a
    288e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	91 05       	cpc	r25, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <H_LED_Void_LedBlink+0x40>
    2896:	8b c0       	rjmp	.+278    	; 0x29ae <H_LED_Void_LedBlink+0x156>
    2898:	00 c2       	rjmp	.+1024   	; 0x2c9a <H_LED_Void_LedBlink+0x442>
    289a:	2a ad       	ldd	r18, Y+58	; 0x3a
    289c:	3b ad       	ldd	r19, Y+59	; 0x3b
    289e:	23 30       	cpi	r18, 0x03	; 3
    28a0:	31 05       	cpc	r19, r1
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <H_LED_Void_LedBlink+0x4e>
    28a4:	01 c1       	rjmp	.+514    	; 0x2aa8 <H_LED_Void_LedBlink+0x250>
    28a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    28a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    28aa:	84 30       	cpi	r24, 0x04	; 4
    28ac:	91 05       	cpc	r25, r1
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <H_LED_Void_LedBlink+0x5a>
    28b0:	78 c1       	rjmp	.+752    	; 0x2ba2 <H_LED_Void_LedBlink+0x34a>
    28b2:	f3 c1       	rjmp	.+998    	; 0x2c9a <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    28b4:	83 e0       	ldi	r24, 0x03	; 3
    28b6:	62 e0       	ldi	r22, 0x02	; 2
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e5       	ldi	r25, 0x50	; 80
    28c2:	a3 ec       	ldi	r26, 0xC3	; 195
    28c4:	b7 e4       	ldi	r27, 0x47	; 71
    28c6:	8d ab       	std	Y+53, r24	; 0x35
    28c8:	9e ab       	std	Y+54, r25	; 0x36
    28ca:	af ab       	std	Y+55, r26	; 0x37
    28cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6d a9       	ldd	r22, Y+53	; 0x35
    28d0:	7e a9       	ldd	r23, Y+54	; 0x36
    28d2:	8f a9       	ldd	r24, Y+55	; 0x37
    28d4:	98 ad       	ldd	r25, Y+56	; 0x38
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a e7       	ldi	r20, 0x7A	; 122
    28dc:	53 e4       	ldi	r21, 0x43	; 67
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	89 ab       	std	Y+49, r24	; 0x31
    28e8:	9a ab       	std	Y+50, r25	; 0x32
    28ea:	ab ab       	std	Y+51, r26	; 0x33
    28ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ee:	69 a9       	ldd	r22, Y+49	; 0x31
    28f0:	7a a9       	ldd	r23, Y+50	; 0x32
    28f2:	8b a9       	ldd	r24, Y+51	; 0x33
    28f4:	9c a9       	ldd	r25, Y+52	; 0x34
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	3f c0       	rjmp	.+126    	; 0x298e <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6d a9       	ldd	r22, Y+53	; 0x35
    292a:	7e a9       	ldd	r23, Y+54	; 0x36
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <H_LED_Void_LedBlink+0x118>
    2952:	89 e1       	ldi	r24, 0x19	; 25
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e a7       	std	Y+46, r25	; 0x2e
    2958:	8d a7       	std	Y+45, r24	; 0x2d
    295a:	8d a5       	ldd	r24, Y+45	; 0x2d
    295c:	9e a5       	ldd	r25, Y+46	; 0x2e
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <H_LED_Void_LedBlink+0x106>
    2962:	9e a7       	std	Y+46, r25	; 0x2e
    2964:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8f a5       	ldd	r24, Y+47	; 0x2f
    2968:	98 a9       	ldd	r25, Y+48	; 0x30
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	98 ab       	std	Y+48, r25	; 0x30
    296e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8f a5       	ldd	r24, Y+47	; 0x2f
    2972:	98 a9       	ldd	r25, Y+48	; 0x30
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <H_LED_Void_LedBlink+0xfa>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	69 a9       	ldd	r22, Y+49	; 0x31
    297c:	7a a9       	ldd	r23, Y+50	; 0x32
    297e:	8b a9       	ldd	r24, Y+51	; 0x33
    2980:	9c a9       	ldd	r25, Y+52	; 0x34
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2990:	98 a9       	ldd	r25, Y+48	; 0x30
    2992:	9c a7       	std	Y+44, r25	; 0x2c
    2994:	8b a7       	std	Y+43, r24	; 0x2b
    2996:	8b a5       	ldd	r24, Y+43	; 0x2b
    2998:	9c a5       	ldd	r25, Y+44	; 0x2c
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <H_LED_Void_LedBlink+0x142>
    299e:	9c a7       	std	Y+44, r25	; 0x2c
    29a0:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	62 e0       	ldi	r22, 0x02	; 2
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    29ac:	76 c1       	rjmp	.+748    	; 0x2c9a <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    29ae:	83 e0       	ldi	r24, 0x03	; 3
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e5       	ldi	r25, 0x50	; 80
    29bc:	a3 ec       	ldi	r26, 0xC3	; 195
    29be:	b7 e4       	ldi	r27, 0x47	; 71
    29c0:	8f a3       	std	Y+39, r24	; 0x27
    29c2:	98 a7       	std	Y+40, r25	; 0x28
    29c4:	a9 a7       	std	Y+41, r26	; 0x29
    29c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ca:	78 a5       	ldd	r23, Y+40	; 0x28
    29cc:	89 a5       	ldd	r24, Y+41	; 0x29
    29ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a e7       	ldi	r20, 0x7A	; 122
    29d6:	53 e4       	ldi	r21, 0x43	; 67
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8b a3       	std	Y+35, r24	; 0x23
    29e2:	9c a3       	std	Y+36, r25	; 0x24
    29e4:	ad a3       	std	Y+37, r26	; 0x25
    29e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29e8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ea:	7c a1       	ldd	r23, Y+36	; 0x24
    29ec:	8d a1       	ldd	r24, Y+37	; 0x25
    29ee:	9e a1       	ldd	r25, Y+38	; 0x26
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9a a3       	std	Y+34, r25	; 0x22
    2a06:	89 a3       	std	Y+33, r24	; 0x21
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    2a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a10:	9e a1       	ldd	r25, Y+38	; 0x26
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6f a1       	ldd	r22, Y+39	; 0x27
    2a24:	78 a5       	ldd	r23, Y+40	; 0x28
    2a26:	89 a5       	ldd	r24, Y+41	; 0x29
    2a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9a a3       	std	Y+34, r25	; 0x22
    2a48:	89 a3       	std	Y+33, r24	; 0x21
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <H_LED_Void_LedBlink+0x212>
    2a4c:	89 e1       	ldi	r24, 0x19	; 25
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	98 a3       	std	Y+32, r25	; 0x20
    2a52:	8f 8f       	std	Y+31, r24	; 0x1f
    2a54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a56:	98 a1       	ldd	r25, Y+32	; 0x20
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <H_LED_Void_LedBlink+0x200>
    2a5c:	98 a3       	std	Y+32, r25	; 0x20
    2a5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	9a a1       	ldd	r25, Y+34	; 0x22
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9a a3       	std	Y+34, r25	; 0x22
    2a68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <H_LED_Void_LedBlink+0x1f4>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6b a1       	ldd	r22, Y+35	; 0x23
    2a76:	7c a1       	ldd	r23, Y+36	; 0x24
    2a78:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9a a3       	std	Y+34, r25	; 0x22
    2a86:	89 a3       	std	Y+33, r24	; 0x21
    2a88:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <H_LED_Void_LedBlink+0x23c>
    2a98:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    2a9c:	83 e0       	ldi	r24, 0x03	; 3
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2aa6:	f9 c0       	rjmp	.+498    	; 0x2c9a <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e5       	ldi	r25, 0x50	; 80
    2ab6:	a3 ec       	ldi	r26, 0xC3	; 195
    2ab8:	b7 e4       	ldi	r27, 0x47	; 71
    2aba:	89 8f       	std	Y+25, r24	; 0x19
    2abc:	9a 8f       	std	Y+26, r25	; 0x1a
    2abe:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a e7       	ldi	r20, 0x7A	; 122
    2ad0:	53 e4       	ldi	r21, 0x43	; 67
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	8d 8b       	std	Y+21, r24	; 0x15
    2adc:	9e 8b       	std	Y+22, r25	; 0x16
    2ade:	af 8b       	std	Y+23, r26	; 0x17
    2ae0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	2c f4       	brge	.+10     	; 0x2b04 <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9c 8b       	std	Y+20, r25	; 0x14
    2b00:	8b 8b       	std	Y+19, r24	; 0x13
    2b02:	3f c0       	rjmp	.+126    	; 0x2b82 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	3f ef       	ldi	r19, 0xFF	; 255
    2b10:	4f e7       	ldi	r20, 0x7F	; 127
    2b12:	57 e4       	ldi	r21, 0x47	; 71
    2b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b18:	18 16       	cp	r1, r24
    2b1a:	4c f5       	brge	.+82     	; 0x2b6e <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <H_LED_Void_LedBlink+0x30c>
    2b46:	89 e1       	ldi	r24, 0x19	; 25
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9a 8b       	std	Y+18, r25	; 0x12
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	9a 89       	ldd	r25, Y+18	; 0x12
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <H_LED_Void_LedBlink+0x2fa>
    2b56:	9a 8b       	std	Y+18, r25	; 0x12
    2b58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	69 f7       	brne	.-38     	; 0x2b46 <H_LED_Void_LedBlink+0x2ee>
    2b6c:	14 c0       	rjmp	.+40     	; 0x2b96 <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b70:	7e 89       	ldd	r23, Y+22	; 0x16
    2b72:	8f 89       	ldd	r24, Y+23	; 0x17
    2b74:	98 8d       	ldd	r25, Y+24	; 0x18
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	98 8b       	std	Y+16, r25	; 0x10
    2b88:	8f 87       	std	Y+15, r24	; 0x0f
    2b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8c:	98 89       	ldd	r25, Y+16	; 0x10
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <H_LED_Void_LedBlink+0x336>
    2b92:	98 8b       	std	Y+16, r25	; 0x10
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2ba0:	7c c0       	rjmp	.+248    	; 0x2c9a <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	63 e0       	ldi	r22, 0x03	; 3
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e5       	ldi	r25, 0x50	; 80
    2bb0:	a3 ec       	ldi	r26, 0xC3	; 195
    2bb2:	b7 e4       	ldi	r27, 0x47	; 71
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	53 e4       	ldi	r21, 0x43	; 67
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <H_LED_Void_LedBlink+0x406>
    2c40:	89 e1       	ldi	r24, 0x19	; 25
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <H_LED_Void_LedBlink+0x3f4>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <H_LED_Void_LedBlink+0x3e8>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <H_LED_Void_LedBlink+0x430>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2c90:	83 e0       	ldi	r24, 0x03	; 3
    2c92:	63 e0       	ldi	r22, 0x03	; 3
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    2c9a:	eb 96       	adiw	r28, 0x3b	; 59
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	64 e0       	ldi	r22, 0x04	; 4
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	65 e0       	ldi	r22, 0x05	; 5
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	66 e0       	ldi	r22, 0x06	; 6
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	67 e0       	ldi	r22, 0x07	; 7
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    2ce8:	84 e0       	ldi	r24, 0x04	; 4
    2cea:	67 e0       	ldi	r22, 0x07	; 7
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    2cf2:	84 e0       	ldi	r24, 0x04	; 4
    2cf4:	66 e0       	ldi	r22, 0x06	; 6
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e4       	ldi	r25, 0x40	; 64
    2d00:	ac e1       	ldi	r26, 0x1C	; 28
    2d02:	b6 e4       	ldi	r27, 0x46	; 70
    2d04:	8b 87       	std	Y+11, r24	; 0x0b
    2d06:	9c 87       	std	Y+12, r25	; 0x0c
    2d08:	ad 87       	std	Y+13, r26	; 0x0d
    2d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	53 e4       	ldi	r21, 0x43	; 67
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8f 83       	std	Y+7, r24	; 0x07
    2d26:	98 87       	std	Y+8, r25	; 0x08
    2d28:	a9 87       	std	Y+9, r26	; 0x09
    2d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <H_LCD_Void_LCDInt+0x102>
    2d90:	89 e1       	ldi	r24, 0x19	; 25
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <H_LCD_Void_LCDInt+0xf0>
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <H_LCD_Void_LCDInt+0xe4>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <H_LCD_Void_LCDInt+0x12c>
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    2de0:	83 e3       	ldi	r24, 0x33	; 51
    2de2:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    2de6:	82 e3       	ldi	r24, 0x32	; 50
    2de8:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    2dec:	88 e2       	ldi	r24, 0x28	; 40
    2dee:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    2df2:	8c e0       	ldi	r24, 0x0C	; 12
    2df4:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>

#endif
}
    2e04:	2e 96       	adiw	r28, 0x0e	; 14
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	e9 97       	sbiw	r28, 0x39	; 57
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2e2c:	84 e0       	ldi	r24, 0x04	; 4
    2e2e:	66 e0       	ldi	r22, 0x06	; 6
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    2e36:	a8 e3       	ldi	r26, 0x38	; 56
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e3c:	98 2f       	mov	r25, r24
    2e3e:	90 7f       	andi	r25, 0xF0	; 240
    2e40:	e8 e3       	ldi	r30, 0x38	; 56
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	8f 70       	andi	r24, 0x0F	; 15
    2e48:	89 2b       	or	r24, r25
    2e4a:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2e4c:	84 e0       	ldi	r24, 0x04	; 4
    2e4e:	67 e0       	ldi	r22, 0x07	; 7
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a0 e8       	ldi	r26, 0x80	; 128
    2e5c:	bf e3       	ldi	r27, 0x3F	; 63
    2e5e:	8d ab       	std	Y+53, r24	; 0x35
    2e60:	9e ab       	std	Y+54, r25	; 0x36
    2e62:	af ab       	std	Y+55, r26	; 0x37
    2e64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e66:	6d a9       	ldd	r22, Y+53	; 0x35
    2e68:	7e a9       	ldd	r23, Y+54	; 0x36
    2e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4a e7       	ldi	r20, 0x7A	; 122
    2e74:	53 e4       	ldi	r21, 0x43	; 67
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	89 ab       	std	Y+49, r24	; 0x31
    2e80:	9a ab       	std	Y+50, r25	; 0x32
    2e82:	ab ab       	std	Y+51, r26	; 0x33
    2e84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e86:	69 a9       	ldd	r22, Y+49	; 0x31
    2e88:	7a a9       	ldd	r23, Y+50	; 0x32
    2e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e8       	ldi	r20, 0x80	; 128
    2e94:	5f e3       	ldi	r21, 0x3F	; 63
    2e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9a:	88 23       	and	r24, r24
    2e9c:	2c f4       	brge	.+10     	; 0x2ea8 <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	98 ab       	std	Y+48, r25	; 0x30
    2ea4:	8f a7       	std	Y+47, r24	; 0x2f
    2ea6:	3f c0       	rjmp	.+126    	; 0x2f26 <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    2ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    2eac:	8b a9       	ldd	r24, Y+51	; 0x33
    2eae:	9c a9       	ldd	r25, Y+52	; 0x34
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	4c f5       	brge	.+82     	; 0x2f12 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e2       	ldi	r20, 0x20	; 32
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	98 ab       	std	Y+48, r25	; 0x30
    2ee6:	8f a7       	std	Y+47, r24	; 0x2f
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <H_LCD_Void_LCDDisplayCharacter+0xf2>
    2eea:	89 e1       	ldi	r24, 0x19	; 25
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9e a7       	std	Y+46, r25	; 0x2e
    2ef0:	8d a7       	std	Y+45, r24	; 0x2d
    2ef2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ef4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <H_LCD_Void_LCDDisplayCharacter+0xe0>
    2efa:	9e a7       	std	Y+46, r25	; 0x2e
    2efc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f00:	98 a9       	ldd	r25, Y+48	; 0x30
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	98 ab       	std	Y+48, r25	; 0x30
    2f06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	69 f7       	brne	.-38     	; 0x2eea <H_LCD_Void_LCDDisplayCharacter+0xd4>
    2f10:	14 c0       	rjmp	.+40     	; 0x2f3a <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f12:	69 a9       	ldd	r22, Y+49	; 0x31
    2f14:	7a a9       	ldd	r23, Y+50	; 0x32
    2f16:	8b a9       	ldd	r24, Y+51	; 0x33
    2f18:	9c a9       	ldd	r25, Y+52	; 0x34
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	98 ab       	std	Y+48, r25	; 0x30
    2f24:	8f a7       	std	Y+47, r24	; 0x2f
    2f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f28:	98 a9       	ldd	r25, Y+48	; 0x30
    2f2a:	9c a7       	std	Y+44, r25	; 0x2c
    2f2c:	8b a7       	std	Y+43, r24	; 0x2b
    2f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    2f36:	9c a7       	std	Y+44, r25	; 0x2c
    2f38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2f3a:	84 e0       	ldi	r24, 0x04	; 4
    2f3c:	67 e0       	ldi	r22, 0x07	; 7
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	a0 e8       	ldi	r26, 0x80	; 128
    2f4a:	bf e3       	ldi	r27, 0x3F	; 63
    2f4c:	8f a3       	std	Y+39, r24	; 0x27
    2f4e:	98 a7       	std	Y+40, r25	; 0x28
    2f50:	a9 a7       	std	Y+41, r26	; 0x29
    2f52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	6f a1       	ldd	r22, Y+39	; 0x27
    2f56:	78 a5       	ldd	r23, Y+40	; 0x28
    2f58:	89 a5       	ldd	r24, Y+41	; 0x29
    2f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a e7       	ldi	r20, 0x7A	; 122
    2f62:	53 e4       	ldi	r21, 0x43	; 67
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8b a3       	std	Y+35, r24	; 0x23
    2f6e:	9c a3       	std	Y+36, r25	; 0x24
    2f70:	ad a3       	std	Y+37, r26	; 0x25
    2f72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f74:	6b a1       	ldd	r22, Y+35	; 0x23
    2f76:	7c a1       	ldd	r23, Y+36	; 0x24
    2f78:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9a a3       	std	Y+34, r25	; 0x22
    2f92:	89 a3       	std	Y+33, r24	; 0x21
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    2f96:	6b a1       	ldd	r22, Y+35	; 0x23
    2f98:	7c a1       	ldd	r23, Y+36	; 0x24
    2f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9a a3       	std	Y+34, r25	; 0x22
    2fd4:	89 a3       	std	Y+33, r24	; 0x21
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    2fd8:	89 e1       	ldi	r24, 0x19	; 25
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	98 a3       	std	Y+32, r25	; 0x20
    2fde:	8f 8f       	std	Y+31, r24	; 0x1f
    2fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fe2:	98 a1       	ldd	r25, Y+32	; 0x20
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    2fe8:	98 a3       	std	Y+32, r25	; 0x20
    2fea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	89 a1       	ldd	r24, Y+33	; 0x21
    2fee:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	9a a3       	std	Y+34, r25	; 0x22
    2ff4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	6b a1       	ldd	r22, Y+35	; 0x23
    3002:	7c a1       	ldd	r23, Y+36	; 0x24
    3004:	8d a1       	ldd	r24, Y+37	; 0x25
    3006:	9e a1       	ldd	r25, Y+38	; 0x26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9a a3       	std	Y+34, r25	; 0x22
    3012:	89 a3       	std	Y+33, r24	; 0x21
    3014:	89 a1       	ldd	r24, Y+33	; 0x21
    3016:	9a a1       	ldd	r25, Y+34	; 0x22
    3018:	9e 8f       	std	Y+30, r25	; 0x1e
    301a:	8d 8f       	std	Y+29, r24	; 0x1d
    301c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    301e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    3024:	9e 8f       	std	Y+30, r25	; 0x1e
    3026:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    3028:	a8 e3       	ldi	r26, 0x38	; 56
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	89 ad       	ldd	r24, Y+57	; 0x39
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	82 95       	swap	r24
    3034:	92 95       	swap	r25
    3036:	90 7f       	andi	r25, 0xF0	; 240
    3038:	98 27       	eor	r25, r24
    303a:	80 7f       	andi	r24, 0xF0	; 240
    303c:	98 27       	eor	r25, r24
    303e:	98 2f       	mov	r25, r24
    3040:	e8 e3       	ldi	r30, 0x38	; 56
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8f 70       	andi	r24, 0x0F	; 15
    3048:	89 2b       	or	r24, r25
    304a:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    304c:	84 e0       	ldi	r24, 0x04	; 4
    304e:	67 e0       	ldi	r22, 0x07	; 7
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 e8       	ldi	r26, 0x80	; 128
    305c:	bf e3       	ldi	r27, 0x3F	; 63
    305e:	89 8f       	std	Y+25, r24	; 0x19
    3060:	9a 8f       	std	Y+26, r25	; 0x1a
    3062:	ab 8f       	std	Y+27, r26	; 0x1b
    3064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	69 8d       	ldd	r22, Y+25	; 0x19
    3068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a e7       	ldi	r20, 0x7A	; 122
    3074:	53 e4       	ldi	r21, 0x43	; 67
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8d 8b       	std	Y+21, r24	; 0x15
    3080:	9e 8b       	std	Y+22, r25	; 0x16
    3082:	af 8b       	std	Y+23, r26	; 0x17
    3084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3086:	6d 89       	ldd	r22, Y+21	; 0x15
    3088:	7e 89       	ldd	r23, Y+22	; 0x16
    308a:	8f 89       	ldd	r24, Y+23	; 0x17
    308c:	98 8d       	ldd	r25, Y+24	; 0x18
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9c 8b       	std	Y+20, r25	; 0x14
    30a4:	8b 8b       	std	Y+19, r24	; 0x13
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    30a8:	6d 89       	ldd	r22, Y+21	; 0x15
    30aa:	7e 89       	ldd	r23, Y+22	; 0x16
    30ac:	8f 89       	ldd	r24, Y+23	; 0x17
    30ae:	98 8d       	ldd	r25, Y+24	; 0x18
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	69 8d       	ldd	r22, Y+25	; 0x19
    30c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9c 8b       	std	Y+20, r25	; 0x14
    30e6:	8b 8b       	std	Y+19, r24	; 0x13
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    30ea:	89 e1       	ldi	r24, 0x19	; 25
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9a 8b       	std	Y+18, r25	; 0x12
    30f0:	89 8b       	std	Y+17, r24	; 0x11
    30f2:	89 89       	ldd	r24, Y+17	; 0x11
    30f4:	9a 89       	ldd	r25, Y+18	; 0x12
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    30fa:	9a 8b       	std	Y+18, r25	; 0x12
    30fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3100:	9c 89       	ldd	r25, Y+20	; 0x14
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8b 89       	ldd	r24, Y+19	; 0x13
    310a:	9c 89       	ldd	r25, Y+20	; 0x14
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	6d 89       	ldd	r22, Y+21	; 0x15
    3114:	7e 89       	ldd	r23, Y+22	; 0x16
    3116:	8f 89       	ldd	r24, Y+23	; 0x17
    3118:	98 8d       	ldd	r25, Y+24	; 0x18
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9c 8b       	std	Y+20, r25	; 0x14
    3124:	8b 8b       	std	Y+19, r24	; 0x13
    3126:	8b 89       	ldd	r24, Y+19	; 0x13
    3128:	9c 89       	ldd	r25, Y+20	; 0x14
    312a:	98 8b       	std	Y+16, r25	; 0x10
    312c:	8f 87       	std	Y+15, r24	; 0x0f
    312e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3130:	98 89       	ldd	r25, Y+16	; 0x10
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    3136:	98 8b       	std	Y+16, r25	; 0x10
    3138:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    313a:	84 e0       	ldi	r24, 0x04	; 4
    313c:	67 e0       	ldi	r22, 0x07	; 7
    313e:	40 e0       	ldi	r20, 0x00	; 0
    3140:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a0 ea       	ldi	r26, 0xA0	; 160
    314a:	b0 e4       	ldi	r27, 0x40	; 64
    314c:	8b 87       	std	Y+11, r24	; 0x0b
    314e:	9c 87       	std	Y+12, r25	; 0x0c
    3150:	ad 87       	std	Y+13, r26	; 0x0d
    3152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3154:	6b 85       	ldd	r22, Y+11	; 0x0b
    3156:	7c 85       	ldd	r23, Y+12	; 0x0c
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a e7       	ldi	r20, 0x7A	; 122
    3162:	53 e4       	ldi	r21, 0x43	; 67
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8f 83       	std	Y+7, r24	; 0x07
    316e:	98 87       	std	Y+8, r25	; 0x08
    3170:	a9 87       	std	Y+9, r26	; 0x09
    3172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	5f e3       	ldi	r21, 0x3F	; 63
    3184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3188:	88 23       	and	r24, r24
    318a:	2c f4       	brge	.+10     	; 0x3196 <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	4f e7       	ldi	r20, 0x7F	; 127
    31a4:	57 e4       	ldi	r21, 0x47	; 71
    31a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31aa:	18 16       	cp	r1, r24
    31ac:	4c f5       	brge	.+82     	; 0x3200 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    31d8:	89 e1       	ldi	r24, 0x19	; 25
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9c 83       	std	Y+4, r25	; 0x04
    31de:	8b 83       	std	Y+3, r24	; 0x03
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	69 f7       	brne	.-38     	; 0x31d8 <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    31fe:	14 c0       	rjmp	.+40     	; 0x3228 <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    3228:	e9 96       	adiw	r28, 0x39	; 57
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	e9 97       	sbiw	r28, 0x39	; 57
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3250:	84 e0       	ldi	r24, 0x04	; 4
    3252:	66 e0       	ldi	r22, 0x06	; 6
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    325a:	a8 e3       	ldi	r26, 0x38	; 56
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	89 ad       	ldd	r24, Y+57	; 0x39
    3260:	98 2f       	mov	r25, r24
    3262:	90 7f       	andi	r25, 0xF0	; 240
    3264:	e8 e3       	ldi	r30, 0x38	; 56
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	8f 70       	andi	r24, 0x0F	; 15
    326c:	89 2b       	or	r24, r25
    326e:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3270:	84 e0       	ldi	r24, 0x04	; 4
    3272:	67 e0       	ldi	r22, 0x07	; 7
    3274:	41 e0       	ldi	r20, 0x01	; 1
    3276:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	a0 e8       	ldi	r26, 0x80	; 128
    3280:	bf e3       	ldi	r27, 0x3F	; 63
    3282:	8d ab       	std	Y+53, r24	; 0x35
    3284:	9e ab       	std	Y+54, r25	; 0x36
    3286:	af ab       	std	Y+55, r26	; 0x37
    3288:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328a:	6d a9       	ldd	r22, Y+53	; 0x35
    328c:	7e a9       	ldd	r23, Y+54	; 0x36
    328e:	8f a9       	ldd	r24, Y+55	; 0x37
    3290:	98 ad       	ldd	r25, Y+56	; 0x38
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	4a e7       	ldi	r20, 0x7A	; 122
    3298:	53 e4       	ldi	r21, 0x43	; 67
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	89 ab       	std	Y+49, r24	; 0x31
    32a4:	9a ab       	std	Y+50, r25	; 0x32
    32a6:	ab ab       	std	Y+51, r26	; 0x33
    32a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32aa:	69 a9       	ldd	r22, Y+49	; 0x31
    32ac:	7a a9       	ldd	r23, Y+50	; 0x32
    32ae:	8b a9       	ldd	r24, Y+51	; 0x33
    32b0:	9c a9       	ldd	r25, Y+52	; 0x34
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e8       	ldi	r20, 0x80	; 128
    32b8:	5f e3       	ldi	r21, 0x3F	; 63
    32ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32be:	88 23       	and	r24, r24
    32c0:	2c f4       	brge	.+10     	; 0x32cc <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	98 ab       	std	Y+48, r25	; 0x30
    32c8:	8f a7       	std	Y+47, r24	; 0x2f
    32ca:	3f c0       	rjmp	.+126    	; 0x334a <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    32cc:	69 a9       	ldd	r22, Y+49	; 0x31
    32ce:	7a a9       	ldd	r23, Y+50	; 0x32
    32d0:	8b a9       	ldd	r24, Y+51	; 0x33
    32d2:	9c a9       	ldd	r25, Y+52	; 0x34
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	3f ef       	ldi	r19, 0xFF	; 255
    32d8:	4f e7       	ldi	r20, 0x7F	; 127
    32da:	57 e4       	ldi	r21, 0x47	; 71
    32dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e0:	18 16       	cp	r1, r24
    32e2:	4c f5       	brge	.+82     	; 0x3336 <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e4:	6d a9       	ldd	r22, Y+53	; 0x35
    32e6:	7e a9       	ldd	r23, Y+54	; 0x36
    32e8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ea:	98 ad       	ldd	r25, Y+56	; 0x38
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	98 ab       	std	Y+48, r25	; 0x30
    330a:	8f a7       	std	Y+47, r24	; 0x2f
    330c:	0f c0       	rjmp	.+30     	; 0x332c <H_LCD_Void_LCDWriteCommand+0xf2>
    330e:	89 e1       	ldi	r24, 0x19	; 25
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9e a7       	std	Y+46, r25	; 0x2e
    3314:	8d a7       	std	Y+45, r24	; 0x2d
    3316:	8d a5       	ldd	r24, Y+45	; 0x2d
    3318:	9e a5       	ldd	r25, Y+46	; 0x2e
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <H_LCD_Void_LCDWriteCommand+0xe0>
    331e:	9e a7       	std	Y+46, r25	; 0x2e
    3320:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3322:	8f a5       	ldd	r24, Y+47	; 0x2f
    3324:	98 a9       	ldd	r25, Y+48	; 0x30
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	98 ab       	std	Y+48, r25	; 0x30
    332a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332c:	8f a5       	ldd	r24, Y+47	; 0x2f
    332e:	98 a9       	ldd	r25, Y+48	; 0x30
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	69 f7       	brne	.-38     	; 0x330e <H_LCD_Void_LCDWriteCommand+0xd4>
    3334:	14 c0       	rjmp	.+40     	; 0x335e <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3336:	69 a9       	ldd	r22, Y+49	; 0x31
    3338:	7a a9       	ldd	r23, Y+50	; 0x32
    333a:	8b a9       	ldd	r24, Y+51	; 0x33
    333c:	9c a9       	ldd	r25, Y+52	; 0x34
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	98 ab       	std	Y+48, r25	; 0x30
    3348:	8f a7       	std	Y+47, r24	; 0x2f
    334a:	8f a5       	ldd	r24, Y+47	; 0x2f
    334c:	98 a9       	ldd	r25, Y+48	; 0x30
    334e:	9c a7       	std	Y+44, r25	; 0x2c
    3350:	8b a7       	std	Y+43, r24	; 0x2b
    3352:	8b a5       	ldd	r24, Y+43	; 0x2b
    3354:	9c a5       	ldd	r25, Y+44	; 0x2c
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <H_LCD_Void_LCDWriteCommand+0x11c>
    335a:	9c a7       	std	Y+44, r25	; 0x2c
    335c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    335e:	84 e0       	ldi	r24, 0x04	; 4
    3360:	67 e0       	ldi	r22, 0x07	; 7
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a0 e8       	ldi	r26, 0x80	; 128
    336e:	bf e3       	ldi	r27, 0x3F	; 63
    3370:	8f a3       	std	Y+39, r24	; 0x27
    3372:	98 a7       	std	Y+40, r25	; 0x28
    3374:	a9 a7       	std	Y+41, r26	; 0x29
    3376:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3378:	6f a1       	ldd	r22, Y+39	; 0x27
    337a:	78 a5       	ldd	r23, Y+40	; 0x28
    337c:	89 a5       	ldd	r24, Y+41	; 0x29
    337e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a e7       	ldi	r20, 0x7A	; 122
    3386:	53 e4       	ldi	r21, 0x43	; 67
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8b a3       	std	Y+35, r24	; 0x23
    3392:	9c a3       	std	Y+36, r25	; 0x24
    3394:	ad a3       	std	Y+37, r26	; 0x25
    3396:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3398:	6b a1       	ldd	r22, Y+35	; 0x23
    339a:	7c a1       	ldd	r23, Y+36	; 0x24
    339c:	8d a1       	ldd	r24, Y+37	; 0x25
    339e:	9e a1       	ldd	r25, Y+38	; 0x26
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	2c f4       	brge	.+10     	; 0x33ba <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9a a3       	std	Y+34, r25	; 0x22
    33b6:	89 a3       	std	Y+33, r24	; 0x21
    33b8:	3f c0       	rjmp	.+126    	; 0x3438 <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    33ba:	6b a1       	ldd	r22, Y+35	; 0x23
    33bc:	7c a1       	ldd	r23, Y+36	; 0x24
    33be:	8d a1       	ldd	r24, Y+37	; 0x25
    33c0:	9e a1       	ldd	r25, Y+38	; 0x26
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ce:	18 16       	cp	r1, r24
    33d0:	4c f5       	brge	.+82     	; 0x3424 <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d2:	6f a1       	ldd	r22, Y+39	; 0x27
    33d4:	78 a5       	ldd	r23, Y+40	; 0x28
    33d6:	89 a5       	ldd	r24, Y+41	; 0x29
    33d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9a a3       	std	Y+34, r25	; 0x22
    33f8:	89 a3       	std	Y+33, r24	; 0x21
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <H_LCD_Void_LCDWriteCommand+0x1e0>
    33fc:	89 e1       	ldi	r24, 0x19	; 25
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	98 a3       	std	Y+32, r25	; 0x20
    3402:	8f 8f       	std	Y+31, r24	; 0x1f
    3404:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3406:	98 a1       	ldd	r25, Y+32	; 0x20
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <H_LCD_Void_LCDWriteCommand+0x1ce>
    340c:	98 a3       	std	Y+32, r25	; 0x20
    340e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	89 a1       	ldd	r24, Y+33	; 0x21
    3412:	9a a1       	ldd	r25, Y+34	; 0x22
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	9a a3       	std	Y+34, r25	; 0x22
    3418:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	89 a1       	ldd	r24, Y+33	; 0x21
    341c:	9a a1       	ldd	r25, Y+34	; 0x22
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	69 f7       	brne	.-38     	; 0x33fc <H_LCD_Void_LCDWriteCommand+0x1c2>
    3422:	14 c0       	rjmp	.+40     	; 0x344c <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	6b a1       	ldd	r22, Y+35	; 0x23
    3426:	7c a1       	ldd	r23, Y+36	; 0x24
    3428:	8d a1       	ldd	r24, Y+37	; 0x25
    342a:	9e a1       	ldd	r25, Y+38	; 0x26
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9a a3       	std	Y+34, r25	; 0x22
    3436:	89 a3       	std	Y+33, r24	; 0x21
    3438:	89 a1       	ldd	r24, Y+33	; 0x21
    343a:	9a a1       	ldd	r25, Y+34	; 0x22
    343c:	9e 8f       	std	Y+30, r25	; 0x1e
    343e:	8d 8f       	std	Y+29, r24	; 0x1d
    3440:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3442:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <H_LCD_Void_LCDWriteCommand+0x20a>
    3448:	9e 8f       	std	Y+30, r25	; 0x1e
    344a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    344c:	a8 e3       	ldi	r26, 0x38	; 56
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	89 ad       	ldd	r24, Y+57	; 0x39
    3452:	88 2f       	mov	r24, r24
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	82 95       	swap	r24
    3458:	92 95       	swap	r25
    345a:	90 7f       	andi	r25, 0xF0	; 240
    345c:	98 27       	eor	r25, r24
    345e:	80 7f       	andi	r24, 0xF0	; 240
    3460:	98 27       	eor	r25, r24
    3462:	98 2f       	mov	r25, r24
    3464:	e8 e3       	ldi	r30, 0x38	; 56
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	8f 70       	andi	r24, 0x0F	; 15
    346c:	89 2b       	or	r24, r25
    346e:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	a0 e8       	ldi	r26, 0x80	; 128
    3480:	bf e3       	ldi	r27, 0x3F	; 63
    3482:	89 8f       	std	Y+25, r24	; 0x19
    3484:	9a 8f       	std	Y+26, r25	; 0x1a
    3486:	ab 8f       	std	Y+27, r26	; 0x1b
    3488:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348a:	69 8d       	ldd	r22, Y+25	; 0x19
    348c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	4a e7       	ldi	r20, 0x7A	; 122
    3498:	53 e4       	ldi	r21, 0x43	; 67
    349a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	8d 8b       	std	Y+21, r24	; 0x15
    34a4:	9e 8b       	std	Y+22, r25	; 0x16
    34a6:	af 8b       	std	Y+23, r26	; 0x17
    34a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34aa:	6d 89       	ldd	r22, Y+21	; 0x15
    34ac:	7e 89       	ldd	r23, Y+22	; 0x16
    34ae:	8f 89       	ldd	r24, Y+23	; 0x17
    34b0:	98 8d       	ldd	r25, Y+24	; 0x18
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	40 e8       	ldi	r20, 0x80	; 128
    34b8:	5f e3       	ldi	r21, 0x3F	; 63
    34ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34be:	88 23       	and	r24, r24
    34c0:	2c f4       	brge	.+10     	; 0x34cc <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	9c 8b       	std	Y+20, r25	; 0x14
    34c8:	8b 8b       	std	Y+19, r24	; 0x13
    34ca:	3f c0       	rjmp	.+126    	; 0x354a <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    34cc:	6d 89       	ldd	r22, Y+21	; 0x15
    34ce:	7e 89       	ldd	r23, Y+22	; 0x16
    34d0:	8f 89       	ldd	r24, Y+23	; 0x17
    34d2:	98 8d       	ldd	r25, Y+24	; 0x18
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	3f ef       	ldi	r19, 0xFF	; 255
    34d8:	4f e7       	ldi	r20, 0x7F	; 127
    34da:	57 e4       	ldi	r21, 0x47	; 71
    34dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e0:	18 16       	cp	r1, r24
    34e2:	4c f5       	brge	.+82     	; 0x3536 <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e4:	69 8d       	ldd	r22, Y+25	; 0x19
    34e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e2       	ldi	r20, 0x20	; 32
    34f2:	51 e4       	ldi	r21, 0x41	; 65
    34f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	9c 8b       	std	Y+20, r25	; 0x14
    350a:	8b 8b       	std	Y+19, r24	; 0x13
    350c:	0f c0       	rjmp	.+30     	; 0x352c <H_LCD_Void_LCDWriteCommand+0x2f2>
    350e:	89 e1       	ldi	r24, 0x19	; 25
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	9a 8b       	std	Y+18, r25	; 0x12
    3514:	89 8b       	std	Y+17, r24	; 0x11
    3516:	89 89       	ldd	r24, Y+17	; 0x11
    3518:	9a 89       	ldd	r25, Y+18	; 0x12
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	f1 f7       	brne	.-4      	; 0x351a <H_LCD_Void_LCDWriteCommand+0x2e0>
    351e:	9a 8b       	std	Y+18, r25	; 0x12
    3520:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3522:	8b 89       	ldd	r24, Y+19	; 0x13
    3524:	9c 89       	ldd	r25, Y+20	; 0x14
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	9c 8b       	std	Y+20, r25	; 0x14
    352a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352c:	8b 89       	ldd	r24, Y+19	; 0x13
    352e:	9c 89       	ldd	r25, Y+20	; 0x14
    3530:	00 97       	sbiw	r24, 0x00	; 0
    3532:	69 f7       	brne	.-38     	; 0x350e <H_LCD_Void_LCDWriteCommand+0x2d4>
    3534:	14 c0       	rjmp	.+40     	; 0x355e <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3536:	6d 89       	ldd	r22, Y+21	; 0x15
    3538:	7e 89       	ldd	r23, Y+22	; 0x16
    353a:	8f 89       	ldd	r24, Y+23	; 0x17
    353c:	98 8d       	ldd	r25, Y+24	; 0x18
    353e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	9c 8b       	std	Y+20, r25	; 0x14
    3548:	8b 8b       	std	Y+19, r24	; 0x13
    354a:	8b 89       	ldd	r24, Y+19	; 0x13
    354c:	9c 89       	ldd	r25, Y+20	; 0x14
    354e:	98 8b       	std	Y+16, r25	; 0x10
    3550:	8f 87       	std	Y+15, r24	; 0x0f
    3552:	8f 85       	ldd	r24, Y+15	; 0x0f
    3554:	98 89       	ldd	r25, Y+16	; 0x10
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	f1 f7       	brne	.-4      	; 0x3556 <H_LCD_Void_LCDWriteCommand+0x31c>
    355a:	98 8b       	std	Y+16, r25	; 0x10
    355c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    355e:	84 e0       	ldi	r24, 0x04	; 4
    3560:	67 e0       	ldi	r22, 0x07	; 7
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	a0 ea       	ldi	r26, 0xA0	; 160
    356e:	b0 e4       	ldi	r27, 0x40	; 64
    3570:	8b 87       	std	Y+11, r24	; 0x0b
    3572:	9c 87       	std	Y+12, r25	; 0x0c
    3574:	ad 87       	std	Y+13, r26	; 0x0d
    3576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3578:	6b 85       	ldd	r22, Y+11	; 0x0b
    357a:	7c 85       	ldd	r23, Y+12	; 0x0c
    357c:	8d 85       	ldd	r24, Y+13	; 0x0d
    357e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	4a e7       	ldi	r20, 0x7A	; 122
    3586:	53 e4       	ldi	r21, 0x43	; 67
    3588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	8f 83       	std	Y+7, r24	; 0x07
    3592:	98 87       	std	Y+8, r25	; 0x08
    3594:	a9 87       	std	Y+9, r26	; 0x09
    3596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e8       	ldi	r20, 0x80	; 128
    35a6:	5f e3       	ldi	r21, 0x3F	; 63
    35a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ac:	88 23       	and	r24, r24
    35ae:	2c f4       	brge	.+10     	; 0x35ba <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	3f c0       	rjmp	.+126    	; 0x3638 <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    35ba:	6f 81       	ldd	r22, Y+7	; 0x07
    35bc:	78 85       	ldd	r23, Y+8	; 0x08
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	3f ef       	ldi	r19, 0xFF	; 255
    35c6:	4f e7       	ldi	r20, 0x7F	; 127
    35c8:	57 e4       	ldi	r21, 0x47	; 71
    35ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ce:	18 16       	cp	r1, r24
    35d0:	4c f5       	brge	.+82     	; 0x3624 <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e2       	ldi	r20, 0x20	; 32
    35e0:	51 e4       	ldi	r21, 0x41	; 65
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	bc 01       	movw	r22, r24
    35ec:	cd 01       	movw	r24, r26
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	0f c0       	rjmp	.+30     	; 0x361a <H_LCD_Void_LCDWriteCommand+0x3e0>
    35fc:	89 e1       	ldi	r24, 0x19	; 25
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	9c 83       	std	Y+4, r25	; 0x04
    3602:	8b 83       	std	Y+3, r24	; 0x03
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	9c 81       	ldd	r25, Y+4	; 0x04
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <H_LCD_Void_LCDWriteCommand+0x3ce>
    360c:	9c 83       	std	Y+4, r25	; 0x04
    360e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	69 f7       	brne	.-38     	; 0x35fc <H_LCD_Void_LCDWriteCommand+0x3c2>
    3622:	14 c0       	rjmp	.+40     	; 0x364c <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3624:	6f 81       	ldd	r22, Y+7	; 0x07
    3626:	78 85       	ldd	r23, Y+8	; 0x08
    3628:	89 85       	ldd	r24, Y+9	; 0x09
    362a:	9a 85       	ldd	r25, Y+10	; 0x0a
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	9a 83       	std	Y+2, r25	; 0x02
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	f1 f7       	brne	.-4      	; 0x3644 <H_LCD_Void_LCDWriteCommand+0x40a>
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    364c:	e9 96       	adiw	r28, 0x39	; 57
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	00 d0       	rcall	.+0      	; 0x3664 <H_Lcd_void_LCDWriteString+0x6>
    3664:	0f 92       	push	r0
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	9b 83       	std	Y+3, r25	; 0x03
    366c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    366e:	19 82       	std	Y+1, r1	; 0x01
    3670:	0e c0       	rjmp	.+28     	; 0x368e <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	9b 81       	ldd	r25, Y+3	; 0x03
    367c:	fc 01       	movw	r30, r24
    367e:	e2 0f       	add	r30, r18
    3680:	f3 1f       	adc	r31, r19
    3682:	80 81       	ld	r24, Z
    3684:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	8f 5f       	subi	r24, 0xFF	; 255
    368c:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	9b 81       	ldd	r25, Y+3	; 0x03
    3698:	fc 01       	movw	r30, r24
    369a:	e2 0f       	add	r30, r18
    369c:	f3 1f       	adc	r31, r19
    369e:	80 81       	ld	r24, Z
    36a0:	88 23       	and	r24, r24
    36a2:	39 f7       	brne	.-50     	; 0x3672 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(s32 Local_s2_Number )
{
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	61 97       	sbiw	r28, 0x11	; 17
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	6e 87       	std	Y+14, r22	; 0x0e
    36ca:	7f 87       	std	Y+15, r23	; 0x0f
    36cc:	88 8b       	std	Y+16, r24	; 0x10
    36ce:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_arr[12]={0};   /// loacal array to store the number of column of the lcd
    36d0:	8c e0       	ldi	r24, 0x0C	; 12
    36d2:	fe 01       	movw	r30, r28
    36d4:	32 96       	adiw	r30, 0x02	; 2
    36d6:	df 01       	movw	r26, r30
    36d8:	98 2f       	mov	r25, r24
    36da:	1d 92       	st	X+, r1
    36dc:	9a 95       	dec	r25
    36de:	e9 f7       	brne	.-6      	; 0x36da <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;    /// local counter for for loop
    36e0:	19 82       	std	Y+1, r1	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    36e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    36e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    36e6:	a8 89       	ldd	r26, Y+16	; 0x10
    36e8:	b9 89       	ldd	r27, Y+17	; 0x11
    36ea:	bb 23       	and	r27, r27
    36ec:	0c f0       	brlt	.+2      	; 0x36f0 <H_Lcd_void_LCDWriteNum+0x40>
    36ee:	42 c0       	rjmp	.+132    	; 0x3774 <H_Lcd_void_LCDWriteNum+0xc4>
    {
     H_LCD_Void_LCDDisplayCharacter('-');
    36f0:	8d e2       	ldi	r24, 0x2D	; 45
    36f2:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
     Local_s2_Number = Local_s2_Number * -1 ;
    36f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    36f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    36fa:	a8 89       	ldd	r26, Y+16	; 0x10
    36fc:	b9 89       	ldd	r27, Y+17	; 0x11
    36fe:	b0 95       	com	r27
    3700:	a0 95       	com	r26
    3702:	90 95       	com	r25
    3704:	81 95       	neg	r24
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	af 4f       	sbci	r26, 0xFF	; 255
    370a:	bf 4f       	sbci	r27, 0xFF	; 255
    370c:	8e 87       	std	Y+14, r24	; 0x0e
    370e:	9f 87       	std	Y+15, r25	; 0x0f
    3710:	a8 8b       	std	Y+16, r26	; 0x10
    3712:	b9 8b       	std	Y+17, r27	; 0x11
    3714:	2f c0       	rjmp	.+94     	; 0x3774 <H_Lcd_void_LCDWriteNum+0xc4>
    }
    while(Local_s2_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	08 2f       	mov	r16, r24
    371a:	11 27       	eor	r17, r17
    371c:	07 fd       	sbrc	r16, 7
    371e:	10 95       	com	r17
    3720:	8e 85       	ldd	r24, Y+14	; 0x0e
    3722:	9f 85       	ldd	r25, Y+15	; 0x0f
    3724:	a8 89       	ldd	r26, Y+16	; 0x10
    3726:	b9 89       	ldd	r27, Y+17	; 0x11
    3728:	2a e0       	ldi	r18, 0x0A	; 10
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	bc 01       	movw	r22, r24
    3732:	cd 01       	movw	r24, r26
    3734:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <__divmodsi4>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	28 2f       	mov	r18, r24
    373e:	ce 01       	movw	r24, r28
    3740:	02 96       	adiw	r24, 0x02	; 2
    3742:	fc 01       	movw	r30, r24
    3744:	e0 0f       	add	r30, r16
    3746:	f1 1f       	adc	r31, r17
    3748:	20 83       	st	Z, r18
    	Local_s2_Number /=10;
    374a:	8e 85       	ldd	r24, Y+14	; 0x0e
    374c:	9f 85       	ldd	r25, Y+15	; 0x0f
    374e:	a8 89       	ldd	r26, Y+16	; 0x10
    3750:	b9 89       	ldd	r27, Y+17	; 0x11
    3752:	2a e0       	ldi	r18, 0x0A	; 10
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	50 e0       	ldi	r21, 0x00	; 0
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <__divmodsi4>
    3762:	da 01       	movw	r26, r20
    3764:	c9 01       	movw	r24, r18
    3766:	8e 87       	std	Y+14, r24	; 0x0e
    3768:	9f 87       	std	Y+15, r25	; 0x0f
    376a:	a8 8b       	std	Y+16, r26	; 0x10
    376c:	b9 8b       	std	Y+17, r27	; 0x11
    	Local_s8_Counter ++;
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	89 83       	std	Y+1, r24	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    {
     H_LCD_Void_LCDDisplayCharacter('-');
     Local_s2_Number = Local_s2_Number * -1 ;
    }
    while(Local_s2_Number !=0)
    3774:	8e 85       	ldd	r24, Y+14	; 0x0e
    3776:	9f 85       	ldd	r25, Y+15	; 0x0f
    3778:	a8 89       	ldd	r26, Y+16	; 0x10
    377a:	b9 89       	ldd	r27, Y+17	; 0x11
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	a1 05       	cpc	r26, r1
    3780:	b1 05       	cpc	r27, r1
    3782:	49 f6       	brne	.-110    	; 0x3716 <H_Lcd_void_LCDWriteNum+0x66>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    	Local_s2_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	81 50       	subi	r24, 0x01	; 1
    3788:	89 83       	std	Y+1, r24	; 0x01
   do
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	28 2f       	mov	r18, r24
    378e:	33 27       	eor	r19, r19
    3790:	27 fd       	sbrc	r18, 7
    3792:	30 95       	com	r19
    3794:	ce 01       	movw	r24, r28
    3796:	02 96       	adiw	r24, 0x02	; 2
    3798:	fc 01       	movw	r30, r24
    379a:	e2 0f       	add	r30, r18
    379c:	f3 1f       	adc	r31, r19
    379e:	80 81       	ld	r24, Z
    37a0:	80 5d       	subi	r24, 0xD0	; 208
    37a2:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	81 50       	subi	r24, 0x01	; 1
    37aa:	89 83       	std	Y+1, r24	; 0x01
    } while(Local_s8_Counter >= 0);
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	88 23       	and	r24, r24
    37b0:	64 f7       	brge	.-40     	; 0x378a <H_Lcd_void_LCDWriteNum+0xda>

}
    37b2:	61 96       	adiw	r28, 0x11	; 17
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	08 95       	ret

000037c8 <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <H_Lcd_void_LCDGoToXY+0x6>
    37ce:	00 d0       	rcall	.+0      	; 0x37d0 <H_Lcd_void_LCDGoToXY+0x8>
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	8b 83       	std	Y+3, r24	; 0x03
    37d6:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	82 30       	cpi	r24, 0x02	; 2
    37dc:	a8 f4       	brcc	.+42     	; 0x3808 <H_Lcd_void_LCDGoToXY+0x40>
    37de:	8c 81       	ldd	r24, Y+4	; 0x04
    37e0:	80 31       	cpi	r24, 0x10	; 16
    37e2:	90 f4       	brcc	.+36     	; 0x3808 <H_Lcd_void_LCDGoToXY+0x40>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    37e4:	80 e8       	ldi	r24, 0x80	; 128
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	80 ec       	ldi	r24, 0xC0	; 192
    37ea:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    37ec:	8b 81       	ldd	r24, Y+3	; 0x03
    37ee:	28 2f       	mov	r18, r24
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	ce 01       	movw	r24, r28
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	fc 01       	movw	r30, r24
    37f8:	e2 0f       	add	r30, r18
    37fa:	f3 1f       	adc	r31, r19
    37fc:	90 81       	ld	r25, Z
    37fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3800:	89 0f       	add	r24, r25
    3802:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
    3806:	04 c0       	rjmp	.+8      	; 0x3810 <H_Lcd_void_LCDGoToXY+0x48>
		}
 else
 {
	 H_Lcd_void_LCDWriteString("wrong input!!");
    3808:	80 e6       	ldi	r24, 0x60	; 96
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 2f 1b 	call	0x365e	; 0x365e <H_Lcd_void_LCDWriteString>
 }

}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	29 97       	sbiw	r28, 0x09	; 9
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	6a 83       	std	Y+2, r22	; 0x02
    3836:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    3838:	8e e6       	ldi	r24, 0x6E	; 110
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	0e 94 2f 1b 	call	0x365e	; 0x365e <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3840:	19 86       	std	Y+9, r1	; 0x09
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	8a 30       	cpi	r24, 0x0A	; 10
    3846:	10 f0       	brcs	.+4      	; 0x384c <H_Lcd_void_LCDClockDisplay+0x2e>
    3848:	21 e0       	ldi	r18, 0x01	; 1
    384a:	29 87       	std	Y+9, r18	; 0x09
    384c:	18 86       	std	Y+8, r1	; 0x08
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	8a 30       	cpi	r24, 0x0A	; 10
    3852:	10 f0       	brcs	.+4      	; 0x3858 <H_Lcd_void_LCDClockDisplay+0x3a>
    3854:	31 e0       	ldi	r19, 0x01	; 1
    3856:	38 87       	std	Y+8, r19	; 0x08
    3858:	89 85       	ldd	r24, Y+9	; 0x09
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	89 2b       	or	r24, r25
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	3f 83       	std	Y+7, r19	; 0x07
    3864:	2e 83       	std	Y+6, r18	; 0x06
    3866:	1d 82       	std	Y+5, r1	; 0x05
    3868:	1c 82       	std	Y+4, r1	; 0x04
    386a:	8b 81       	ldd	r24, Y+3	; 0x03
    386c:	8a 30       	cpi	r24, 0x0A	; 10
    386e:	20 f0       	brcs	.+8      	; 0x3878 <H_Lcd_void_LCDClockDisplay+0x5a>
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9d 83       	std	Y+5, r25	; 0x05
    3876:	8c 83       	std	Y+4, r24	; 0x04
    3878:	8e 81       	ldd	r24, Y+6	; 0x06
    387a:	9f 81       	ldd	r25, Y+7	; 0x07
    387c:	2c 81       	ldd	r18, Y+4	; 0x04
    387e:	3d 81       	ldd	r19, Y+5	; 0x05
    3880:	82 2b       	or	r24, r18
    3882:	93 2b       	or	r25, r19
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	d1 f1       	breq	.+116    	; 0x38fc <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	67 e0       	ldi	r22, 0x07	; 7
    388c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    3890:	84 e7       	ldi	r24, 0x74	; 116
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 2f 1b 	call	0x365e	; 0x365e <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	67 e0       	ldi	r22, 0x07	; 7
    389c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	88 2f       	mov	r24, r24
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	a0 e0       	ldi	r26, 0x00	; 0
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	8a 30       	cpi	r24, 0x0A	; 10
    38b6:	18 f4       	brcc	.+6      	; 0x38be <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    38b8:	80 e2       	ldi	r24, 0x20	; 32
    38ba:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    38be:	8a e3       	ldi	r24, 0x3A	; 58
    38c0:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    38c4:	8a 81       	ldd	r24, Y+2	; 0x02
    38c6:	88 2f       	mov	r24, r24
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	a0 e0       	ldi	r26, 0x00	; 0
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	8a 30       	cpi	r24, 0x0A	; 10
    38da:	18 f4       	brcc	.+6      	; 0x38e2 <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    38dc:	80 e2       	ldi	r24, 0x20	; 32
    38de:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    38e2:	8a e3       	ldi	r24, 0x3A	; 58
    38e4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    38e8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	a0 e0       	ldi	r26, 0x00	; 0
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
    38fa:	2d c0       	rjmp	.+90     	; 0x3956 <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	67 e0       	ldi	r22, 0x07	; 7
    3900:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    3904:	8c e7       	ldi	r24, 0x7C	; 124
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 2f 1b 	call	0x365e	; 0x365e <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	67 e0       	ldi	r22, 0x07	; 7
    3910:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	88 2f       	mov	r24, r24
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	a0 e0       	ldi	r26, 0x00	; 0
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3926:	8a e3       	ldi	r24, 0x3A	; 58
    3928:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    392c:	8a 81       	ldd	r24, Y+2	; 0x02
    392e:	88 2f       	mov	r24, r24
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    393e:	8a e3       	ldi	r24, 0x3A	; 58
    3940:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	88 2f       	mov	r24, r24
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	bc 01       	movw	r22, r24
    3950:	cd 01       	movw	r24, r26
    3952:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <H_Lcd_void_LCDWriteNum>
	}


}
    3956:	29 96       	adiw	r28, 0x09	; 9
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	08 95       	ret

00003968 <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    3968:	df 93       	push	r29
    396a:	cf 93       	push	r28
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_Void_LCDWriteCommand>
}
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <H_KEYPAD_void_KeyPadInt>:
#include "KeyPad_Int.h"

///*****************Functions**********//

void H_KEYPAD_void_KeyPadInt(void)
{
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62

	///***************** _ Set Row Pins Direction as input**********//
	M_DIO_void_SetPinDirection(ROWS_PORT, Row1_PIN, OUTPUT);  ///Set_Row_1_Pin_Direction
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row2_PIN, OUTPUT);  ///Set_Row_2_Pin_Direction
    398e:	82 e0       	ldi	r24, 0x02	; 2
    3990:	61 e0       	ldi	r22, 0x01	; 1
    3992:	41 e0       	ldi	r20, 0x01	; 1
    3994:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row3_PIN, OUTPUT);  ///Set_Row_3_Pin_Direction
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	62 e0       	ldi	r22, 0x02	; 2
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row4_PIN, OUTPUT);  ///Set_Row_4_Pin_Direction
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	63 e0       	ldi	r22, 0x03	; 3
    39a6:	41 e0       	ldi	r20, 0x01	; 1
    39a8:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>

	///***************** _ Set Columns Pins Direction as input**********//
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col1_PIN, INPUT);  ///Set_Column_1_Pin_Value
    39ac:	84 e0       	ldi	r24, 0x04	; 4
    39ae:	62 e0       	ldi	r22, 0x02	; 2
    39b0:	40 e0       	ldi	r20, 0x00	; 0
    39b2:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col2_PIN, INPUT);  ///Set_Column_2_Pin_Value
    39b6:	84 e0       	ldi	r24, 0x04	; 4
    39b8:	63 e0       	ldi	r22, 0x03	; 3
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col3_PIN, INPUT);  ///Set_Column_3_Pin_Value
    39c0:	84 e0       	ldi	r24, 0x04	; 4
    39c2:	64 e0       	ldi	r22, 0x04	; 4
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col4_PIN, INPUT);  ///Set_Column_4_Pin_Value
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	65 e0       	ldi	r22, 0x05	; 5
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>

	///***************** _ Set Row Pins Value to HIGH **********//
	M_DIO_void_SetPinValue(ROWS_PORT, Row1_PIN, HIGH);  ///Set_Row_1_Pin_Direction
    39d4:	82 e0       	ldi	r24, 0x02	; 2
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	41 e0       	ldi	r20, 0x01	; 1
    39da:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row2_PIN, HIGH);  ///Set_Row_2_Pin_Direction
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row3_PIN, HIGH);  ///Set_Row_3_Pin_Direction
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	62 e0       	ldi	r22, 0x02	; 2
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row4_PIN, HIGH);  ///Set_Row_4_Pin_Direction
    39f2:	82 e0       	ldi	r24, 0x02	; 2
    39f4:	63 e0       	ldi	r22, 0x03	; 3
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>



}
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <H_KEYPAD_void_KeyPadRead>:
u8 H_KEYPAD_void_KeyPadRead(void)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	a6 97       	sbiw	r28, 0x26	; 38
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
#if KEYPAD_MODEDL == MODEL_A

	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
    3a16:	ce 01       	movw	r24, r28
    3a18:	42 96       	adiw	r24, 0x12	; 18
    3a1a:	9b a3       	std	Y+35, r25	; 0x23
    3a1c:	8a a3       	std	Y+34, r24	; 0x22
    3a1e:	ea e8       	ldi	r30, 0x8A	; 138
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	fd a3       	std	Y+37, r31	; 0x25
    3a24:	ec a3       	std	Y+36, r30	; 0x24
    3a26:	f0 e1       	ldi	r31, 0x10	; 16
    3a28:	fe a3       	std	Y+38, r31	; 0x26
    3a2a:	ec a1       	ldd	r30, Y+36	; 0x24
    3a2c:	fd a1       	ldd	r31, Y+37	; 0x25
    3a2e:	00 80       	ld	r0, Z
    3a30:	8c a1       	ldd	r24, Y+36	; 0x24
    3a32:	9d a1       	ldd	r25, Y+37	; 0x25
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	9d a3       	std	Y+37, r25	; 0x25
    3a38:	8c a3       	std	Y+36, r24	; 0x24
    3a3a:	ea a1       	ldd	r30, Y+34	; 0x22
    3a3c:	fb a1       	ldd	r31, Y+35	; 0x23
    3a3e:	00 82       	st	Z, r0
    3a40:	8a a1       	ldd	r24, Y+34	; 0x22
    3a42:	9b a1       	ldd	r25, Y+35	; 0x23
    3a44:	01 96       	adiw	r24, 0x01	; 1
    3a46:	9b a3       	std	Y+35, r25	; 0x23
    3a48:	8a a3       	std	Y+34, r24	; 0x22
    3a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4c:	91 50       	subi	r25, 0x01	; 1
    3a4e:	9e a3       	std	Y+38, r25	; 0x26
    3a50:	ee a1       	ldd	r30, Y+38	; 0x26
    3a52:	ee 23       	and	r30, r30
    3a54:	51 f7       	brne	.-44     	; 0x3a2a <H_KEYPAD_void_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
#endif
	u8 Local_u8_Col =0;            /// local columns counter
    3a56:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_Row =0;            /// local Rows counter
    3a58:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	8f 87       	std	Y+15, r24	; 0x0f

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    3a5e:	18 8a       	std	Y+16, r1	; 0x10
    3a60:	ad c0       	rjmp	.+346    	; 0x3bbc <H_KEYPAD_void_KeyPadRead+0x1ba>
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	68 89       	ldd	r22, Y+16	; 0x10
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	89 8b       	std	Y+17, r24	; 0x11
    3a70:	99 c0       	rjmp	.+306    	; 0x3ba4 <H_KEYPAD_void_KeyPadRead+0x1a2>
		{

		   ///**************Read_Local Column Pin value**********
		   /// ************** check if button is pressed********
		   if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    3a72:	84 e0       	ldi	r24, 0x04	; 4
    3a74:	69 89       	ldd	r22, Y+17	; 0x11
    3a76:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    3a7a:	88 23       	and	r24, r24
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <H_KEYPAD_void_KeyPadRead+0x7e>
    3a7e:	8f c0       	rjmp	.+286    	; 0x3b9e <H_KEYPAD_void_KeyPadRead+0x19c>
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	a0 ef       	ldi	r26, 0xF0	; 240
    3a86:	b2 e4       	ldi	r27, 0x42	; 66
    3a88:	8b 87       	std	Y+11, r24	; 0x0b
    3a8a:	9c 87       	std	Y+12, r25	; 0x0c
    3a8c:	ad 87       	std	Y+13, r26	; 0x0d
    3a8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	4a e7       	ldi	r20, 0x7A	; 122
    3a9e:	53 e4       	ldi	r21, 0x43	; 67
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	8f 83       	std	Y+7, r24	; 0x07
    3aaa:	98 87       	std	Y+8, r25	; 0x08
    3aac:	a9 87       	std	Y+9, r26	; 0x09
    3aae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e8       	ldi	r20, 0x80	; 128
    3abe:	5f e3       	ldi	r21, 0x3F	; 63
    3ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ac4:	88 23       	and	r24, r24
    3ac6:	2c f4       	brge	.+10     	; 0x3ad2 <H_KEYPAD_void_KeyPadRead+0xd0>
		__ticks = 1;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	9e 83       	std	Y+6, r25	; 0x06
    3ace:	8d 83       	std	Y+5, r24	; 0x05
    3ad0:	3f c0       	rjmp	.+126    	; 0x3b50 <H_KEYPAD_void_KeyPadRead+0x14e>
	else if (__tmp > 65535)
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	3f ef       	ldi	r19, 0xFF	; 255
    3ade:	4f e7       	ldi	r20, 0x7F	; 127
    3ae0:	57 e4       	ldi	r21, 0x47	; 71
    3ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ae6:	18 16       	cp	r1, r24
    3ae8:	4c f5       	brge	.+82     	; 0x3b3c <H_KEYPAD_void_KeyPadRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	40 e2       	ldi	r20, 0x20	; 32
    3af8:	51 e4       	ldi	r21, 0x41	; 65
    3afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	bc 01       	movw	r22, r24
    3b04:	cd 01       	movw	r24, r26
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
    3b12:	0f c0       	rjmp	.+30     	; 0x3b32 <H_KEYPAD_void_KeyPadRead+0x130>
    3b14:	89 e1       	ldi	r24, 0x19	; 25
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	9c 83       	std	Y+4, r25	; 0x04
    3b1a:	8b 83       	std	Y+3, r24	; 0x03
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <H_KEYPAD_void_KeyPadRead+0x11e>
    3b24:	9c 83       	std	Y+4, r25	; 0x04
    3b26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b28:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	9e 83       	std	Y+6, r25	; 0x06
    3b30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	9e 81       	ldd	r25, Y+6	; 0x06
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	69 f7       	brne	.-38     	; 0x3b14 <H_KEYPAD_void_KeyPadRead+0x112>
    3b3a:	14 c0       	rjmp	.+40     	; 0x3b64 <H_KEYPAD_void_KeyPadRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3e:	78 85       	ldd	r23, Y+8	; 0x08
    3b40:	89 85       	ldd	r24, Y+9	; 0x09
    3b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	9e 83       	std	Y+6, r25	; 0x06
    3b4e:	8d 83       	std	Y+5, r24	; 0x05
    3b50:	8d 81       	ldd	r24, Y+5	; 0x05
    3b52:	9e 81       	ldd	r25, Y+6	; 0x06
    3b54:	9a 83       	std	Y+2, r25	; 0x02
    3b56:	89 83       	std	Y+1, r24	; 0x01
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	f1 f7       	brne	.-4      	; 0x3b5c <H_KEYPAD_void_KeyPadRead+0x15a>
    3b60:	9a 83       	std	Y+2, r25	; 0x02
    3b62:	89 83       	std	Y+1, r24	; 0x01
		   {   ////*******delay for DEBOUNCING
			   _delay_ms(KEYPAD_DEBOUNCING_TIME);
			   /// ************** check again if button is pressed********
			    if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    3b64:	84 e0       	ldi	r24, 0x04	; 4
    3b66:	69 89       	ldd	r22, Y+17	; 0x11
    3b68:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_DIO_U8_PinRead>
    3b6c:	88 23       	and	r24, r24
    3b6e:	b9 f4       	brne	.+46     	; 0x3b9e <H_KEYPAD_void_KeyPadRead+0x19c>
		     	{
	            ///********if button is pressed set Local_u8_Read  ********
				  Local_u8_Read =Local_u8_Arr [Local_u8_Row][Local_u8_Col - 2] ;
    3b70:	88 89       	ldd	r24, Y+16	; 0x10
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	89 89       	ldd	r24, Y+17	; 0x11
    3b78:	88 2f       	mov	r24, r24
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	ac 01       	movw	r20, r24
    3b7e:	42 50       	subi	r20, 0x02	; 2
    3b80:	50 40       	sbci	r21, 0x00	; 0
    3b82:	22 0f       	add	r18, r18
    3b84:	33 1f       	adc	r19, r19
    3b86:	22 0f       	add	r18, r18
    3b88:	33 1f       	adc	r19, r19
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	82 0f       	add	r24, r18
    3b90:	93 1f       	adc	r25, r19
    3b92:	84 0f       	add	r24, r20
    3b94:	95 1f       	adc	r25, r21
    3b96:	fc 01       	movw	r30, r24
    3b98:	71 96       	adiw	r30, 0x11	; 17
    3b9a:	80 81       	ld	r24, Z
    3b9c:	8f 87       	std	Y+15, r24	; 0x0f
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    3b9e:	89 89       	ldd	r24, Y+17	; 0x11
    3ba0:	8f 5f       	subi	r24, 0xFF	; 255
    3ba2:	89 8b       	std	Y+17, r24	; 0x11
    3ba4:	89 89       	ldd	r24, Y+17	; 0x11
    3ba6:	86 30       	cpi	r24, 0x06	; 6
    3ba8:	08 f4       	brcc	.+2      	; 0x3bac <H_KEYPAD_void_KeyPadRead+0x1aa>
    3baa:	63 cf       	rjmp	.-314    	; 0x3a72 <H_KEYPAD_void_KeyPadRead+0x70>

			    }
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
    3bac:	82 e0       	ldi	r24, 0x02	; 2
    3bae:	68 89       	ldd	r22, Y+16	; 0x10
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
    3bb2:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
	u8 Local_u8_Row =0;            /// local Rows counter
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    3bb6:	88 89       	ldd	r24, Y+16	; 0x10
    3bb8:	8f 5f       	subi	r24, 0xFF	; 255
    3bba:	88 8b       	std	Y+16, r24	; 0x10
    3bbc:	88 89       	ldd	r24, Y+16	; 0x10
    3bbe:	84 30       	cpi	r24, 0x04	; 4
    3bc0:	08 f4       	brcc	.+2      	; 0x3bc4 <H_KEYPAD_void_KeyPadRead+0x1c2>
    3bc2:	4f cf       	rjmp	.-354    	; 0x3a62 <H_KEYPAD_void_KeyPadRead+0x60>
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
	}
    return Local_u8_Read ;
    3bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3bc6:	a6 96       	adiw	r28, 0x26	; 38
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	cf 91       	pop	r28
    3bd4:	df 91       	pop	r29
    3bd6:	08 95       	ret

00003bd8 <H_BUZ_Void_BUZint>:

///***************** Functions **********//

///  H_BUZ_Void_BUZint function to initialize  Buzzer
void H_BUZ_Void_BUZint(void)
{
    3bd8:	df 93       	push	r29
    3bda:	cf 93       	push	r28
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
   M_DIO_void_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    3be0:	83 e0       	ldi	r24, 0x03	; 3
    3be2:	65 e0       	ldi	r22, 0x05	; 5
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 b9 07 	call	0xf72	; 0xf72 <M_DIO_void_SetPinDirection>
}
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	08 95       	ret

00003bf0 <H_BUZ_Void_BUZSetON>:
void H_BUZ_Void_BUZSetON(void)
{
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	65 e0       	ldi	r22, 0x05	; 5
    3bfc:	41 e0       	ldi	r20, 0x01	; 1
    3bfe:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
}
    3c02:	cf 91       	pop	r28
    3c04:	df 91       	pop	r29
    3c06:	08 95       	ret

00003c08 <H_BUZ_Void_BUZSetOFF>:
void H_BUZ_Void_BUZSetOFF(void)
{
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	65 e0       	ldi	r22, 0x05	; 5
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_void_SetPinValue>
}
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	08 95       	ret

00003c20 <main>:
#include "main.h"      ///*** this is a header file to contain all includes of Application



int main ()
{
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62

	    //// initialize TIMER0  PWM
        M_TIMER0_void_Pwm0Int();
    3c28:	0e 94 67 06 	call	0xcce	; 0xcce <M_TIMER0_void_Pwm0Int>
        /// function to set desired  duty cycle
        M_TIMER0_void_Pwm0SetDutyCycle(50);   ///  desired duty cycle (100)
    3c2c:	82 e3       	ldi	r24, 0x32	; 50
    3c2e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_TIMER0_void_Pwm0SetDutyCycle>
        //// function to start the TIMER0 PWM0
        M_TIMER0_void_Pwm0Start();
    3c32:	0e 94 b3 06 	call	0xd66	; 0xd66 <M_TIMER0_void_Pwm0Start>
    3c36:	ff cf       	rjmp	.-2      	; 0x3c36 <main+0x16>

00003c38 <__mulsi3>:
    3c38:	62 9f       	mul	r22, r18
    3c3a:	d0 01       	movw	r26, r0
    3c3c:	73 9f       	mul	r23, r19
    3c3e:	f0 01       	movw	r30, r0
    3c40:	82 9f       	mul	r24, r18
    3c42:	e0 0d       	add	r30, r0
    3c44:	f1 1d       	adc	r31, r1
    3c46:	64 9f       	mul	r22, r20
    3c48:	e0 0d       	add	r30, r0
    3c4a:	f1 1d       	adc	r31, r1
    3c4c:	92 9f       	mul	r25, r18
    3c4e:	f0 0d       	add	r31, r0
    3c50:	83 9f       	mul	r24, r19
    3c52:	f0 0d       	add	r31, r0
    3c54:	74 9f       	mul	r23, r20
    3c56:	f0 0d       	add	r31, r0
    3c58:	65 9f       	mul	r22, r21
    3c5a:	f0 0d       	add	r31, r0
    3c5c:	99 27       	eor	r25, r25
    3c5e:	72 9f       	mul	r23, r18
    3c60:	b0 0d       	add	r27, r0
    3c62:	e1 1d       	adc	r30, r1
    3c64:	f9 1f       	adc	r31, r25
    3c66:	63 9f       	mul	r22, r19
    3c68:	b0 0d       	add	r27, r0
    3c6a:	e1 1d       	adc	r30, r1
    3c6c:	f9 1f       	adc	r31, r25
    3c6e:	bd 01       	movw	r22, r26
    3c70:	cf 01       	movw	r24, r30
    3c72:	11 24       	eor	r1, r1
    3c74:	08 95       	ret

00003c76 <__udivmodqi4>:
    3c76:	99 1b       	sub	r25, r25
    3c78:	79 e0       	ldi	r23, 0x09	; 9
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <__udivmodqi4_ep>

00003c7c <__udivmodqi4_loop>:
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	96 17       	cp	r25, r22
    3c80:	08 f0       	brcs	.+2      	; 0x3c84 <__udivmodqi4_ep>
    3c82:	96 1b       	sub	r25, r22

00003c84 <__udivmodqi4_ep>:
    3c84:	88 1f       	adc	r24, r24
    3c86:	7a 95       	dec	r23
    3c88:	c9 f7       	brne	.-14     	; 0x3c7c <__udivmodqi4_loop>
    3c8a:	80 95       	com	r24
    3c8c:	08 95       	ret

00003c8e <__divmodhi4>:
    3c8e:	97 fb       	bst	r25, 7
    3c90:	09 2e       	mov	r0, r25
    3c92:	07 26       	eor	r0, r23
    3c94:	0a d0       	rcall	.+20     	; 0x3caa <__divmodhi4_neg1>
    3c96:	77 fd       	sbrc	r23, 7
    3c98:	04 d0       	rcall	.+8      	; 0x3ca2 <__divmodhi4_neg2>
    3c9a:	49 d0       	rcall	.+146    	; 0x3d2e <__udivmodhi4>
    3c9c:	06 d0       	rcall	.+12     	; 0x3caa <__divmodhi4_neg1>
    3c9e:	00 20       	and	r0, r0
    3ca0:	1a f4       	brpl	.+6      	; 0x3ca8 <__divmodhi4_exit>

00003ca2 <__divmodhi4_neg2>:
    3ca2:	70 95       	com	r23
    3ca4:	61 95       	neg	r22
    3ca6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ca8 <__divmodhi4_exit>:
    3ca8:	08 95       	ret

00003caa <__divmodhi4_neg1>:
    3caa:	f6 f7       	brtc	.-4      	; 0x3ca8 <__divmodhi4_exit>
    3cac:	90 95       	com	r25
    3cae:	81 95       	neg	r24
    3cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb2:	08 95       	ret

00003cb4 <__udivmodsi4>:
    3cb4:	a1 e2       	ldi	r26, 0x21	; 33
    3cb6:	1a 2e       	mov	r1, r26
    3cb8:	aa 1b       	sub	r26, r26
    3cba:	bb 1b       	sub	r27, r27
    3cbc:	fd 01       	movw	r30, r26
    3cbe:	0d c0       	rjmp	.+26     	; 0x3cda <__udivmodsi4_ep>

00003cc0 <__udivmodsi4_loop>:
    3cc0:	aa 1f       	adc	r26, r26
    3cc2:	bb 1f       	adc	r27, r27
    3cc4:	ee 1f       	adc	r30, r30
    3cc6:	ff 1f       	adc	r31, r31
    3cc8:	a2 17       	cp	r26, r18
    3cca:	b3 07       	cpc	r27, r19
    3ccc:	e4 07       	cpc	r30, r20
    3cce:	f5 07       	cpc	r31, r21
    3cd0:	20 f0       	brcs	.+8      	; 0x3cda <__udivmodsi4_ep>
    3cd2:	a2 1b       	sub	r26, r18
    3cd4:	b3 0b       	sbc	r27, r19
    3cd6:	e4 0b       	sbc	r30, r20
    3cd8:	f5 0b       	sbc	r31, r21

00003cda <__udivmodsi4_ep>:
    3cda:	66 1f       	adc	r22, r22
    3cdc:	77 1f       	adc	r23, r23
    3cde:	88 1f       	adc	r24, r24
    3ce0:	99 1f       	adc	r25, r25
    3ce2:	1a 94       	dec	r1
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <__udivmodsi4_loop>
    3ce6:	60 95       	com	r22
    3ce8:	70 95       	com	r23
    3cea:	80 95       	com	r24
    3cec:	90 95       	com	r25
    3cee:	9b 01       	movw	r18, r22
    3cf0:	ac 01       	movw	r20, r24
    3cf2:	bd 01       	movw	r22, r26
    3cf4:	cf 01       	movw	r24, r30
    3cf6:	08 95       	ret

00003cf8 <__divmodsi4>:
    3cf8:	97 fb       	bst	r25, 7
    3cfa:	09 2e       	mov	r0, r25
    3cfc:	05 26       	eor	r0, r21
    3cfe:	0e d0       	rcall	.+28     	; 0x3d1c <__divmodsi4_neg1>
    3d00:	57 fd       	sbrc	r21, 7
    3d02:	04 d0       	rcall	.+8      	; 0x3d0c <__divmodsi4_neg2>
    3d04:	d7 df       	rcall	.-82     	; 0x3cb4 <__udivmodsi4>
    3d06:	0a d0       	rcall	.+20     	; 0x3d1c <__divmodsi4_neg1>
    3d08:	00 1c       	adc	r0, r0
    3d0a:	38 f4       	brcc	.+14     	; 0x3d1a <__divmodsi4_exit>

00003d0c <__divmodsi4_neg2>:
    3d0c:	50 95       	com	r21
    3d0e:	40 95       	com	r20
    3d10:	30 95       	com	r19
    3d12:	21 95       	neg	r18
    3d14:	3f 4f       	sbci	r19, 0xFF	; 255
    3d16:	4f 4f       	sbci	r20, 0xFF	; 255
    3d18:	5f 4f       	sbci	r21, 0xFF	; 255

00003d1a <__divmodsi4_exit>:
    3d1a:	08 95       	ret

00003d1c <__divmodsi4_neg1>:
    3d1c:	f6 f7       	brtc	.-4      	; 0x3d1a <__divmodsi4_exit>
    3d1e:	90 95       	com	r25
    3d20:	80 95       	com	r24
    3d22:	70 95       	com	r23
    3d24:	61 95       	neg	r22
    3d26:	7f 4f       	sbci	r23, 0xFF	; 255
    3d28:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2c:	08 95       	ret

00003d2e <__udivmodhi4>:
    3d2e:	aa 1b       	sub	r26, r26
    3d30:	bb 1b       	sub	r27, r27
    3d32:	51 e1       	ldi	r21, 0x11	; 17
    3d34:	07 c0       	rjmp	.+14     	; 0x3d44 <__udivmodhi4_ep>

00003d36 <__udivmodhi4_loop>:
    3d36:	aa 1f       	adc	r26, r26
    3d38:	bb 1f       	adc	r27, r27
    3d3a:	a6 17       	cp	r26, r22
    3d3c:	b7 07       	cpc	r27, r23
    3d3e:	10 f0       	brcs	.+4      	; 0x3d44 <__udivmodhi4_ep>
    3d40:	a6 1b       	sub	r26, r22
    3d42:	b7 0b       	sbc	r27, r23

00003d44 <__udivmodhi4_ep>:
    3d44:	88 1f       	adc	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	5a 95       	dec	r21
    3d4a:	a9 f7       	brne	.-22     	; 0x3d36 <__udivmodhi4_loop>
    3d4c:	80 95       	com	r24
    3d4e:	90 95       	com	r25
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	08 95       	ret

00003d56 <__prologue_saves__>:
    3d56:	2f 92       	push	r2
    3d58:	3f 92       	push	r3
    3d5a:	4f 92       	push	r4
    3d5c:	5f 92       	push	r5
    3d5e:	6f 92       	push	r6
    3d60:	7f 92       	push	r7
    3d62:	8f 92       	push	r8
    3d64:	9f 92       	push	r9
    3d66:	af 92       	push	r10
    3d68:	bf 92       	push	r11
    3d6a:	cf 92       	push	r12
    3d6c:	df 92       	push	r13
    3d6e:	ef 92       	push	r14
    3d70:	ff 92       	push	r15
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	ca 1b       	sub	r28, r26
    3d80:	db 0b       	sbc	r29, r27
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	09 94       	ijmp

00003d8e <__epilogue_restores__>:
    3d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d90:	39 88       	ldd	r3, Y+17	; 0x11
    3d92:	48 88       	ldd	r4, Y+16	; 0x10
    3d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3da0:	b9 84       	ldd	r11, Y+9	; 0x09
    3da2:	c8 84       	ldd	r12, Y+8	; 0x08
    3da4:	df 80       	ldd	r13, Y+7	; 0x07
    3da6:	ee 80       	ldd	r14, Y+6	; 0x06
    3da8:	fd 80       	ldd	r15, Y+5	; 0x05
    3daa:	0c 81       	ldd	r16, Y+4	; 0x04
    3dac:	1b 81       	ldd	r17, Y+3	; 0x03
    3dae:	aa 81       	ldd	r26, Y+2	; 0x02
    3db0:	b9 81       	ldd	r27, Y+1	; 0x01
    3db2:	ce 0f       	add	r28, r30
    3db4:	d1 1d       	adc	r29, r1
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	f8 94       	cli
    3dba:	de bf       	out	0x3e, r29	; 62
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	cd bf       	out	0x3d, r28	; 61
    3dc0:	ed 01       	movw	r28, r26
    3dc2:	08 95       	ret

00003dc4 <_exit>:
    3dc4:	f8 94       	cli

00003dc6 <__stop_program>:
    3dc6:	ff cf       	rjmp	.-2      	; 0x3dc6 <__stop_program>
